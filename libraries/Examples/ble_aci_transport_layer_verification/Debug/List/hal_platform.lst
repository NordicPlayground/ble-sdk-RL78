###############################################################################
#
# IAR C/C++ Compiler V1.40.1.861 for RL78                 02/Dec/2014  00:18:42
# Copyright 2011-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Renesas RL78, 16K KickStart Edition 1.40
#
#    Core         =  rl78_1
#    Code model   =  Near
#    Data model   =  Near
#                 =   
#    Source file  =  
#        C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\BLE\hal_platform.cpp
#    Command line =  
#        "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\BLE\hal_platform.cpp" --core
#        rl78_1 --code_model near --data_model near --near_const_location rom0
#        -o "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\Obj\"
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\rl78\LIB\dlrl78nn1f.h" -e -Ol --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_crosscall --no_scheduling
#        --no_clustering --debug -lCN "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\List\"
#        -I "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\..\..\RL78\"
#        -I "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\..\..\BLE\"
#    List file    =  
#        C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\List\hal_platform.lst
#    Object file  =  
#        C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\Obj\hal_platform.r87
#
###############################################################################

C:\Users\Emilio García\Desktop\ble-sdk-rl78\libraries\BLE\hal_platform.cpp
      1          /* Copyright (c) 2014, Nordic Semiconductor ASA
      2           *
      3           * Permission is hereby granted, free of charge, to any person obtaining a copy
      4           * of this software and associated documentation files (the "Software"), to deal
      5           * in the Software without restriction, including without limitation the rights
      6           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      7           * copies of the Software, and to permit persons to whom the Software is
      8           * furnished to do so, subject to the following conditions:
      9           *
     10           * The above copyright notice and this permission notice shall be included in all
     11           * copies or substantial portions of the Software.
     12           *
     13           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     14           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     15           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     16           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     17           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     18           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     19           * SOFTWARE.
     20           */
     21          
     22          #include "hal_platform.h"
     23          

   \                                 In  segment CODE, align 1, keep-with-next
     24          void pinMode(uint8_t pin, uint8_t pinMode)
   \                     pinMode:
     25          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     26            
     27          }
   \   000000 D7                    RET                          ;; 6 cycles
   \   000001                       ; ------------------------------------- Block: 6 cycles
   \   000001                       ; ------------------------------------- Total: 6 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
     28          

   \                                 In  segment CODE, align 1, keep-with-next
     29          void attachInterrupt(uint8_t interruptNumber, void (*handlerPtr)(void), uint8_t mode)
   \                     attachInterrupt:
     30          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     31            
     32          }
   \   000000 D7                    RET                          ;; 6 cycles
   \   000001                       ; ------------------------------------- Block: 6 cycles
   \   000001                       ; ------------------------------------- Total: 6 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
     33          

   \                                 In  segment CODE, align 1, keep-with-next
     34          void detachInterrupt(uint8_t interruptNumber)
   \                     detachInterrupt:
     35          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     36            
     37          }
   \   000000 D7                    RET                          ;; 6 cycles
   \   000001                       ; ------------------------------------- Block: 6 cycles
   \   000001                       ; ------------------------------------- Total: 6 cycles
   \   000001                       REQUIRE ?CLRL78_V1_0_L00
     38          

   \                                 In  segment CODE, align 1, keep-with-next
     39          void noInterrupts(void)
   \                     noInterrupts:
     40          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     41            DI();
   \   000000 717BFA                DI                           ;; 2 cycles
     42          }
   \   000003 D7                    RET                          ;; 6 cycles
   \   000004                       ; ------------------------------------- Block: 8 cycles
   \   000004                       ; ------------------------------------- Total: 8 cycles
   \   000004                       REQUIRE ?CLRL78_V1_0_L00
     43          

   \                                 In  segment CODE, align 1, keep-with-next
     44          void interrupts(void)
   \                     interrupts:
     45          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
     46            EI();
   \   000000 717AFA                EI                           ;; 2 cycles
     47          }
   \   000003 D7                    RET                          ;; 6 cycles
   \   000004                       ; ------------------------------------- Block: 8 cycles
   \   000004                       ; ------------------------------------- Total: 8 cycles
   \   000004                       REQUIRE ?CLRL78_V1_0_L00

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   attachInterrupt
      0   detachInterrupt
      0   interrupts
      0   noInterrupts
      0   pinMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  attachInterrupt
       1  detachInterrupt
       4  interrupts
       4  noInterrupts
       1  pinMode

 
 11 bytes in segment CODE
 
 11 bytes of CODE memory

Errors: none
Warnings: none
