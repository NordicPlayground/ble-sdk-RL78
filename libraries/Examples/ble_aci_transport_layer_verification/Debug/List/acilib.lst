###############################################################################
#
# IAR C/C++ Compiler V1.40.1.861 for RL78                 02/Dec/2014  00:18:41
# Copyright 2011-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Renesas RL78, 16K KickStart Edition 1.40
#
#    Core         =  rl78_1
#    Code model   =  Near
#    Data model   =  Near
#                 =   
#    Source file  =  
#        C:\Users\Emilio García\Desktop\ble-sdk-rl78\libraries\BLE\acilib.cpp
#    Command line =  
#        "C:\Users\Emilio García\Desktop\ble-sdk-rl78\libraries\BLE\acilib.cpp"
#        --core rl78_1 --code_model near --data_model near
#        --near_const_location rom0 -o "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\Obj\"
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\rl78\LIB\dlrl78nn1f.h" -e -Ol --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_crosscall --no_scheduling
#        --no_clustering --debug -lCN "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\List\"
#        -I "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\..\..\RL78\"
#        -I "C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\..\..\BLE\"
#    List file    =  
#        C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\List\acilib.lst
#    Object file  =  
#        C:\Users\Emilio
#        García\Desktop\ble-sdk-rl78\libraries\Examples\ble_aci_transport_layer_verification\Debug\Obj\acilib.r87
#
###############################################################################

C:\Users\Emilio García\Desktop\ble-sdk-rl78\libraries\BLE\acilib.cpp
      1          /* Copyright (c) 2014, Nordic Semiconductor ASA
      2           *
      3           * Permission is hereby granted, free of charge, to any person obtaining a copy
      4           * of this software and associated documentation files (the "Software"), to deal
      5           * in the Software without restriction, including without limitation the rights
      6           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      7           * copies of the Software, and to permit persons to whom the Software is
      8           * furnished to do so, subject to the following conditions:
      9           *
     10           * The above copyright notice and this permission notice shall be included in all
     11           * copies or substantial portions of the Software.
     12           *
     13           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     14           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     15           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     16           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     17           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     18           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     19           * SOFTWARE.
     20           */
     21          
     22          /**
     23           * @file
     24           *
     25           * @ingroup group_acilib
     26           *
     27           * @brief Implementation of the acilib module.
     28           */
     29          
     30          
     31          #include "hal_platform.h"
     32          #include "aci.h"
     33          #include "aci_cmds.h"
     34          #include "aci_evts.h"
     35          #include "acilib.h"
     36          #include "aci_protocol_defines.h"
     37          #include "acilib_defs.h"
     38          #include "acilib_if.h"
     39          #include "acilib_types.h"
     40          
     41          

   \                                 In  segment CODE, align 1, keep-with-next
     42          void acil_encode_cmd_set_test_mode(uint8_t *buffer, aci_cmd_params_test_t *p_aci_cmd_params_test)
   \                     acil_encode_cmd_set_test_mode:
     43          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
     44            *(buffer + OFFSET_ACI_CMD_T_LEN) = 2;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
     45            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_TEST;
   \   000007 E1                    ONEB      A                  ;; 1 cycle
   \   000008 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
     46            *(buffer + OFFSET_ACI_CMD_T_TEST + OFFSET_ACI_CMD_PARAMS_TEST_T_TEST_MODE_CHANGE) = p_aci_cmd_params_test->test_mode_change;
   \   00000A 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000B 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
     47          }
   \   00000D C4                    POP       DE                 ;; 1 cycle
   \   00000E D7                    RET                          ;; 6 cycles
   \   00000F                       ; ------------------------------------- Block: 17 cycles
   \   00000F                       ; ------------------------------------- Total: 17 cycles
   \   00000F                       REQUIRE ?CLRL78_V1_0_L00
     48          

   \                                 In  segment CODE, align 1, keep-with-next
     49          void acil_encode_cmd_sleep(uint8_t *buffer)
   \                     acil_encode_cmd_sleep:
     50          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
     51            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
     52            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SLEEP;
   \   000003 5104                  MOV       A, #0x4            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
     53          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
     54          

   \                                 In  segment CODE, align 1, keep-with-next
     55          void acil_encode_cmd_get_device_version(uint8_t *buffer)
   \                     acil_encode_cmd_get_device_version:
     56          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
     57            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
     58            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_DEVICE_VERSION;
   \   000003 5109                  MOV       A, #0x9            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
     59          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
     60          

   \                                 In  segment CODE, align 1, keep-with-next
     61          void acil_encode_cmd_set_local_data(uint8_t *buffer, aci_cmd_params_set_local_data_t *p_aci_cmd_params_set_local_data, uint8_t data_size)
   \                     acil_encode_cmd_set_local_data:
     62          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 65                    MOV       A, D               ;; 1 cycle
   \   000004 72                    MOV       C, A               ;; 1 cycle
   \   000005 75                    MOV       D, A               ;; 1 cycle
     63            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SET_LOCAL_DATA_BASE_LEN + data_size;
   \   000006 62                    MOV       A, C               ;; 1 cycle
   \   000007 0C02                  ADD       A, #0x2            ;; 1 cycle
   \   000009 9B                    MOV       [HL], A            ;; 1 cycle
     64            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SET_LOCAL_DATA;
   \   00000A 510D                  MOV       A, #0xD            ;; 1 cycle
   \   00000C 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
     65            *(buffer + OFFSET_ACI_CMD_T_SET_LOCAL_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_PIPE_NUMBER) = p_aci_cmd_params_set_local_data->tx_data.pipe_number;
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
   \   000011 89                    MOV       A, [DE]            ;; 1 cycle
   \   000012 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
     66            memcpy(buffer + OFFSET_ACI_CMD_T_SET_LOCAL_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_ACI_DATA,  &(p_aci_cmd_params_set_local_data->tx_data.aci_data[0]), data_size);
   \   000014 F3                    CLRB      B                  ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 A1                    INCW      AX                 ;; 1 cycle
   \   000018 14                    MOVW      DE, AX             ;; 1 cycle
   \   000019 A7                    INCW      HL                 ;; 1 cycle
   \   00001A A7                    INCW      HL                 ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00001D FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
     67          }
   \   000020 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000022 C4                    POP       DE                 ;; 1 cycle
   \   000023 D7                    RET                          ;; 6 cycles
   \   000024                       ; ------------------------------------- Block: 34 cycles
   \   000024                       ; ------------------------------------- Total: 34 cycles
   \   000024                       REQUIRE ?CLRL78_V1_0_L00
     68          

   \                                 In  segment CODE, align 1, keep-with-next
     69          void acil_encode_cmd_connect(uint8_t *buffer, aci_cmd_params_connect_t *p_aci_cmd_params_connect)
   \                     acil_encode_cmd_connect:
     70          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
     71            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CONNECT_LEN;
   \   000003 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000008 9B                    MOV       [HL], A            ;; 1 cycle
     72            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CONNECT;
   \   000009 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000B A1                    INCW      AX                 ;; 1 cycle
   \   00000C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000D 510F                  MOV       A, #0xF            ;; 1 cycle
   \   00000F 9B                    MOV       [HL], A            ;; 1 cycle
     73            *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_TIMEOUT_MSB) = (uint8_t)(p_aci_cmd_params_connect->timeout >> 8);
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 16                    MOVW      HL, AX             ;; 1 cycle
   \   000013 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000014 75                    MOV       D, A               ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 A7                    INCW      HL                 ;; 1 cycle
   \   000019 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00001A 70                    MOV       X, A               ;; 1 cycle
   \   00001B 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00001D F0                    CLRB      X                  ;; 1 cycle
   \   00001E 73                    MOV       B, A               ;; 1 cycle
   \   00001F 70                    MOV       X, A               ;; 1 cycle
   \   000020 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000022 16                    MOVW      HL, AX             ;; 1 cycle
   \   000023 63                    MOV       A, B               ;; 1 cycle
   \   000024 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
     74            *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_TIMEOUT_LSB) = (uint8_t)(p_aci_cmd_params_connect->timeout);
   \   000026 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000028 16                    MOVW      HL, AX             ;; 1 cycle
   \   000029 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00002A 73                    MOV       B, A               ;; 1 cycle
   \   00002B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002E A7                    INCW      HL                 ;; 1 cycle
   \   00002F 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000030 72                    MOV       C, A               ;; 1 cycle
   \   000031 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000033 16                    MOVW      HL, AX             ;; 1 cycle
   \   000034 63                    MOV       A, B               ;; 1 cycle
   \   000035 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
     75            *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_ADV_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_connect->adv_interval >> 8);
   \   000037 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000039 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003A 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   00003C 73                    MOV       B, A               ;; 1 cycle
   \   00003D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00003F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000040 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000042 70                    MOV       X, A               ;; 1 cycle
   \   000043 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000045 F0                    CLRB      X                  ;; 1 cycle
   \   000046 74                    MOV       E, A               ;; 1 cycle
   \   000047 70                    MOV       X, A               ;; 1 cycle
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B 64                    MOV       A, E               ;; 1 cycle
   \   00004C 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
     76            *(buffer + OFFSET_ACI_CMD_T_CONNECT + OFFSET_ACI_CMD_PARAMS_CONNECT_T_ADV_INTERVAL_LSB) = (uint8_t)(p_aci_cmd_params_connect->adv_interval);
   \   00004E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000050 16                    MOVW      HL, AX             ;; 1 cycle
   \   000051 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000053 70                    MOV       X, A               ;; 1 cycle
   \   000054 37                    XCHW      AX, HL             ;; 1 cycle
   \   000055 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000057 37                    XCHW      AX, HL             ;; 1 cycle
   \   000058 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   00005A 74                    MOV       E, A               ;; 1 cycle
   \   00005B 60                    MOV       A, X               ;; 1 cycle
   \   00005C 37                    XCHW      AX, HL             ;; 1 cycle
   \   00005D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005F 37                    XCHW      AX, HL             ;; 1 cycle
   \   000060 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
     77          }
   \   000062 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000064 C4                    POP       DE                 ;; 1 cycle
   \   000065 D7                    RET                          ;; 6 cycles
   \   000066                       ; ------------------------------------- Block: 80 cycles
   \   000066                       ; ------------------------------------- Total: 80 cycles
   \   000066                       REQUIRE ?CLRL78_V1_0_L00
     78          

   \                                 In  segment CODE, align 1, keep-with-next
     79          void acil_encode_cmd_bond(uint8_t *buffer, aci_cmd_params_bond_t *p_aci_cmd_params_bond)
   \                     acil_encode_cmd_bond:
     80          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
     81            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_BOND_LEN;
   \   000003 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000008 9B                    MOV       [HL], A            ;; 1 cycle
     82            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_BOND;
   \   000009 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000B A1                    INCW      AX                 ;; 1 cycle
   \   00000C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000D 5110                  MOV       A, #0x10           ;; 1 cycle
   \   00000F 9B                    MOV       [HL], A            ;; 1 cycle
     83            *(buffer + OFFSET_ACI_CMD_T_BOND + OFFSET_ACI_CMD_PARAMS_BOND_T_TIMEOUT_MSB) = (uint8_t)(p_aci_cmd_params_bond->timeout >> 8);
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 16                    MOVW      HL, AX             ;; 1 cycle
   \   000013 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000014 75                    MOV       D, A               ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 A7                    INCW      HL                 ;; 1 cycle
   \   000019 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00001A 70                    MOV       X, A               ;; 1 cycle
   \   00001B 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00001D F0                    CLRB      X                  ;; 1 cycle
   \   00001E 73                    MOV       B, A               ;; 1 cycle
   \   00001F 70                    MOV       X, A               ;; 1 cycle
   \   000020 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000022 16                    MOVW      HL, AX             ;; 1 cycle
   \   000023 63                    MOV       A, B               ;; 1 cycle
   \   000024 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
     84            *(buffer + OFFSET_ACI_CMD_T_BOND + OFFSET_ACI_CMD_PARAMS_BOND_T_TIMEOUT_LSB) = (uint8_t)(p_aci_cmd_params_bond->timeout);
   \   000026 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000028 16                    MOVW      HL, AX             ;; 1 cycle
   \   000029 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00002A 73                    MOV       B, A               ;; 1 cycle
   \   00002B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002E A7                    INCW      HL                 ;; 1 cycle
   \   00002F 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000030 72                    MOV       C, A               ;; 1 cycle
   \   000031 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000033 16                    MOVW      HL, AX             ;; 1 cycle
   \   000034 63                    MOV       A, B               ;; 1 cycle
   \   000035 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
     85            *(buffer + OFFSET_ACI_CMD_T_BOND + OFFSET_ACI_CMD_PARAMS_BOND_T_ADV_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_bond->adv_interval >> 8);
   \   000037 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000039 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003A 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   00003C 73                    MOV       B, A               ;; 1 cycle
   \   00003D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00003F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000040 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000042 70                    MOV       X, A               ;; 1 cycle
   \   000043 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000045 F0                    CLRB      X                  ;; 1 cycle
   \   000046 74                    MOV       E, A               ;; 1 cycle
   \   000047 70                    MOV       X, A               ;; 1 cycle
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B 64                    MOV       A, E               ;; 1 cycle
   \   00004C 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
     86            *(buffer + OFFSET_ACI_CMD_T_BOND + OFFSET_ACI_CMD_PARAMS_BOND_T_ADV_INTERVAL_LSB) = (uint8_t)(p_aci_cmd_params_bond->adv_interval);
   \   00004E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000050 16                    MOVW      HL, AX             ;; 1 cycle
   \   000051 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000053 70                    MOV       X, A               ;; 1 cycle
   \   000054 37                    XCHW      AX, HL             ;; 1 cycle
   \   000055 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000057 37                    XCHW      AX, HL             ;; 1 cycle
   \   000058 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   00005A 74                    MOV       E, A               ;; 1 cycle
   \   00005B 60                    MOV       A, X               ;; 1 cycle
   \   00005C 37                    XCHW      AX, HL             ;; 1 cycle
   \   00005D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005F 37                    XCHW      AX, HL             ;; 1 cycle
   \   000060 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
     87          }
   \   000062 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000064 C4                    POP       DE                 ;; 1 cycle
   \   000065 D7                    RET                          ;; 6 cycles
   \   000066                       ; ------------------------------------- Block: 80 cycles
   \   000066                       ; ------------------------------------- Total: 80 cycles
   \   000066                       REQUIRE ?CLRL78_V1_0_L00
     88          

   \                                 In  segment CODE, align 1, keep-with-next
     89          void acil_encode_cmd_disconnect(uint8_t *buffer, aci_cmd_params_disconnect_t *p_aci_cmd_params_disconnect)
   \                     acil_encode_cmd_disconnect:
     90          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
     91            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_DISCONNECT_LEN;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
     92            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_DISCONNECT;
   \   000007 5111                  MOV       A, #0x11           ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
     93            *(buffer + OFFSET_ACI_CMD_T_DISCONNECT + OFFSET_ACI_CMD_PARAMS_DISCONNECT_T_REASON) = (uint8_t)(p_aci_cmd_params_disconnect->reason);
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
     94          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
     95          

   \                                 In  segment CODE, align 1, keep-with-next
     96          void acil_encode_baseband_reset(uint8_t *buffer)
   \                     acil_encode_baseband_reset:
     97          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
     98            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_BASEBAND_RESET_LEN;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
     99            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_RADIO_RESET;
   \   000003 510E                  MOV       A, #0xE            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    100          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    101          

   \                                 In  segment CODE, align 1, keep-with-next
    102          void acil_encode_direct_connect(uint8_t *buffer)
   \                     acil_encode_direct_connect:
    103          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    104            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_DIRECT_CONNECT_LEN;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    105            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CONNECT_DIRECT;
   \   000003 511E                  MOV       A, #0x1E           ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    106          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    107          

   \                                 In  segment CODE, align 1, keep-with-next
    108          void acil_encode_cmd_wakeup(uint8_t *buffer)
   \                     acil_encode_cmd_wakeup:
    109          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    110            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_WAKEUP_LEN;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    111            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_WAKEUP;
   \   000003 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    112          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    113          

   \                                 In  segment CODE, align 1, keep-with-next
    114          void acil_encode_cmd_set_radio_tx_power(uint8_t *buffer, aci_cmd_params_set_tx_power_t *p_aci_cmd_params_set_tx_power)
   \                     acil_encode_cmd_set_radio_tx_power:
    115          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    116            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SET_RADIO_TX_POWER_LEN;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
    117            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SET_TX_POWER;
   \   000007 5112                  MOV       A, #0x12           ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    118            *(buffer + OFFSET_ACI_CMD_T_SET_TX_POWER + OFFSET_ACI_CMD_PARAMS_SET_TX_POWER_T_DEVICE_POWER) = (uint8_t)p_aci_cmd_params_set_tx_power->device_power;
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    119          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    120          

   \                                 In  segment CODE, align 1, keep-with-next
    121          void acil_encode_cmd_get_address(uint8_t *buffer)
   \                     acil_encode_cmd_get_address:
    122          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    123            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_GET_DEVICE_ADDR_LEN;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    124            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_DEVICE_ADDRESS;
   \   000003 510A                  MOV       A, #0xA            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    125          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    126          

   \                                 In  segment CODE, align 1, keep-with-next
    127          void acil_encode_cmd_send_data(uint8_t *buffer, aci_cmd_params_send_data_t *p_aci_cmd_params_send_data_t, uint8_t data_size)
   \                     acil_encode_cmd_send_data:
    128          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 65                    MOV       A, D               ;; 1 cycle
   \   000004 72                    MOV       C, A               ;; 1 cycle
   \   000005 75                    MOV       D, A               ;; 1 cycle
    129            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SEND_DATA_BASE_LEN + data_size;
   \   000006 62                    MOV       A, C               ;; 1 cycle
   \   000007 0C02                  ADD       A, #0x2            ;; 1 cycle
   \   000009 9B                    MOV       [HL], A            ;; 1 cycle
    130            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SEND_DATA;
   \   00000A 5115                  MOV       A, #0x15           ;; 1 cycle
   \   00000C 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    131            *(buffer + OFFSET_ACI_CMD_T_SEND_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_PIPE_NUMBER) = p_aci_cmd_params_send_data_t->tx_data.pipe_number;
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
   \   000011 89                    MOV       A, [DE]            ;; 1 cycle
   \   000012 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    132            memcpy((buffer + OFFSET_ACI_CMD_T_SEND_DATA + OFFSET_ACI_CMD_PARAMS_SEND_DATA_T_TX_DATA + OFFSET_ACI_TX_DATA_T_ACI_DATA), &(p_aci_cmd_params_send_data_t->tx_data.aci_data[0]), data_size);
   \   000014 F3                    CLRB      B                  ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 A1                    INCW      AX                 ;; 1 cycle
   \   000018 14                    MOVW      DE, AX             ;; 1 cycle
   \   000019 A7                    INCW      HL                 ;; 1 cycle
   \   00001A A7                    INCW      HL                 ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00001D FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    133          }
   \   000020 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000022 C4                    POP       DE                 ;; 1 cycle
   \   000023 D7                    RET                          ;; 6 cycles
   \   000024                       ; ------------------------------------- Block: 34 cycles
   \   000024                       ; ------------------------------------- Total: 34 cycles
   \   000024                       REQUIRE ?CLRL78_V1_0_L00
    134          

   \                                 In  segment CODE, align 1, keep-with-next
    135          void acil_encode_cmd_request_data(uint8_t *buffer, aci_cmd_params_request_data_t *p_aci_cmd_params_request_data)
   \                     acil_encode_cmd_request_data:
    136          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    137            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_DATA_REQUEST_LEN;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
    138            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_REQUEST_DATA;
   \   000007 5117                  MOV       A, #0x17           ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    139            *(buffer + OFFSET_ACI_CMD_T_REQUEST_DATA + OFFSET_ACI_CMD_PARAMS_REQUEST_DATA_T_PIPE_NUMBER) = p_aci_cmd_params_request_data->pipe_number;
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    140          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    141          

   \                                 In  segment CODE, align 1, keep-with-next
    142          void acil_encode_cmd_open_remote_pipe(uint8_t *buffer, aci_cmd_params_open_remote_pipe_t *p_aci_cmd_params_open_remote_pipe)
   \                     acil_encode_cmd_open_remote_pipe:
    143          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    144            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_OPEN_REMOTE_PIPE_LEN;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
    145            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_OPEN_REMOTE_PIPE;
   \   000007 5114                  MOV       A, #0x14           ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    146            *(buffer + OFFSET_ACI_CMD_T_OPEN_REMOTE_PIPE + OFFSET_ACI_CMD_PARAMS_OPEN_REMOTE_PIPE_T_PIPE_NUMBER) = p_aci_cmd_params_open_remote_pipe->pipe_number;
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    147          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    148          

   \                                 In  segment CODE, align 1, keep-with-next
    149          void acil_encode_cmd_close_remote_pipe(uint8_t *buffer, aci_cmd_params_close_remote_pipe_t *p_aci_cmd_params_close_remote_pipe)
   \                     acil_encode_cmd_close_remote_pipe:
    150          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    151            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CLOSE_REMOTE_PIPE_LEN;
   \   000004 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
    152            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CLOSE_REMOTE_PIPE;
   \   000007 511F                  MOV       A, #0x1F           ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    153            *(buffer + OFFSET_ACI_CMD_T_CLOSE_REMOTE_PIPE + OFFSET_ACI_CMD_PARAMS_CLOSE_REMOTE_PIPE_T_PIPE_NUMBER) = p_aci_cmd_params_close_remote_pipe->pipe_number;
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    154          }
   \   00000E C4                    POP       DE                 ;; 1 cycle
   \   00000F D7                    RET                          ;; 6 cycles
   \   000010                       ; ------------------------------------- Block: 17 cycles
   \   000010                       ; ------------------------------------- Total: 17 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    155          

   \                                 In  segment CODE, align 1, keep-with-next
    156          void acil_encode_cmd_echo_msg(uint8_t *buffer, aci_cmd_params_echo_t *p_cmd_params_echo, uint8_t msg_size)
   \                     acil_encode_cmd_echo_msg:
    157          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    158            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_ECHO_MSG_CMD_BASE_LEN + msg_size;
   \   000003 65                    MOV       A, D               ;; 1 cycle
   \   000004 81                    INC       A                  ;; 1 cycle
   \   000005 9B                    MOV       [HL], A            ;; 1 cycle
    159            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_ECHO;
   \   000006 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000008 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    160            memcpy((buffer + OFFSET_ACI_CMD_T_ECHO + OFFSET_ACI_CMD_PARAMS_ECHO_T_ECHO_DATA), &(p_cmd_params_echo->echo_data[0]), msg_size);
   \   00000A 65                    MOV       A, D               ;; 1 cycle
   \   00000B 72                    MOV       C, A               ;; 1 cycle
   \   00000C 75                    MOV       D, A               ;; 1 cycle
   \   00000D F3                    CLRB      B                  ;; 1 cycle
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
   \   000011 A7                    INCW      HL                 ;; 1 cycle
   \   000012 A7                    INCW      HL                 ;; 1 cycle
   \   000013 13                    MOVW      AX, BC             ;; 1 cycle
   \   000014 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    161          }
   \   000017 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000019 C4                    POP       DE                 ;; 1 cycle
   \   00001A D7                    RET                          ;; 6 cycles
   \   00001B                       ; ------------------------------------- Block: 28 cycles
   \   00001B                       ; ------------------------------------- Total: 28 cycles
   \   00001B                       REQUIRE ?CLRL78_V1_0_L00
    162          

   \                                 In  segment CODE, align 1, keep-with-next
    163          void acil_encode_cmd_battery_level(uint8_t *buffer)
   \                     acil_encode_cmd_battery_level:
    164          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    165            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    166            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_BATTERY_LEVEL;
   \   000003 510B                  MOV       A, #0xB            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    167          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    168          

   \                                 In  segment CODE, align 1, keep-with-next
    169          void acil_encode_cmd_temparature(uint8_t *buffer)
   \                     acil_encode_cmd_temparature:
    170          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    171            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    172            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_GET_TEMPERATURE;
   \   000003 510C                  MOV       A, #0xC            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    173          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    174          

   \                                 In  segment CODE, align 1, keep-with-next
    175          void acil_encode_cmd_read_dynamic_data(uint8_t *buffer)
   \                     acil_encode_cmd_read_dynamic_data:
    176          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    177            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    178            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_READ_DYNAMIC_DATA;
   \   000003 5107                  MOV       A, #0x7            ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    179          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    180          

   \                                 In  segment CODE, align 1, keep-with-next
    181          void acil_encode_cmd_write_dynamic_data(uint8_t *buffer, uint8_t seq_no, uint8_t* dynamic_data, uint8_t dynamic_data_size)
   \                     acil_encode_cmd_write_dynamic_data:
    182          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    183            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_WRITE_DYNAMIC_DATA_BASE_LEN + dynamic_data_size;
   \   000001 62                    MOV       A, C               ;; 1 cycle
   \   000002 0C02                  ADD       A, #0x2            ;; 1 cycle
   \   000004 9B                    MOV       [HL], A            ;; 1 cycle
    184            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_WRITE_DYNAMIC_DATA;
   \   000005 5108                  MOV       A, #0x8            ;; 1 cycle
   \   000007 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    185            *(buffer + OFFSET_ACI_CMD_T_WRITE_DYNAMIC_DATA + OFFSET_ACI_CMD_PARAMS_WRITE_DYNAMIC_DATA_T_SEQ_NO) = seq_no;
   \   000009 63                    MOV       A, B               ;; 1 cycle
   \   00000A 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    186            memcpy((buffer + OFFSET_ACI_CMD_T_WRITE_DYNAMIC_DATA + OFFSET_ACI_CMD_PARAMS_WRITE_DYNAMIC_DATA_T_DYNAMIC_DATA), dynamic_data, dynamic_data_size);
   \   00000C F3                    CLRB      B                  ;; 1 cycle
   \   00000D A7                    INCW      HL                 ;; 1 cycle
   \   00000E A7                    INCW      HL                 ;; 1 cycle
   \   00000F A7                    INCW      HL                 ;; 1 cycle
   \   000010 13                    MOVW      AX, BC             ;; 1 cycle
   \   000011 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    187          }
   \   000014 D7                    RET                          ;; 6 cycles
   \   000015                       ; ------------------------------------- Block: 22 cycles
   \   000015                       ; ------------------------------------- Total: 22 cycles
   \   000015                       REQUIRE ?CLRL78_V1_0_L00
    188          

   \                                 In  segment CODE, align 1, keep-with-next
    189          void acil_encode_cmd_change_timing_req(uint8_t *buffer, aci_cmd_params_change_timing_t *p_aci_cmd_params_change_timing)
   \                     acil_encode_cmd_change_timing_req:
    190          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 4
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 C3                    PUSH      BC                 ;; 1 cycle
   \   000004 C6                    POP       HL                 ;; 1 cycle
    191            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CHANGE_TIMING_LEN;
   \   000005 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 5109                  MOV       A, #0x9            ;; 1 cycle
   \   00000A 99                    MOV       [DE], A            ;; 1 cycle
    192            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CHANGE_TIMING;
   \   00000B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000D A1                    INCW      AX                 ;; 1 cycle
   \   00000E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000F 5113                  MOV       A, #0x13           ;; 1 cycle
   \   000011 99                    MOV       [DE], A            ;; 1 cycle
    193            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_MIN_CONN_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.min_conn_interval >> 8);
   \   000012 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000013 9800                  MOV       [SP], A            ;; 1 cycle
   \   000015 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   000017 70                    MOV       X, A               ;; 1 cycle
   \   000018 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00001A F0                    CLRB      X                  ;; 1 cycle
   \   00001B 73                    MOV       B, A               ;; 1 cycle
   \   00001C 70                    MOV       X, A               ;; 1 cycle
   \   00001D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000020 63                    MOV       A, B               ;; 1 cycle
   \   000021 9A03                  MOV       [DE+0x03], A       ;; 1 cycle
    194            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_MIN_CONN_INTERVAL_LSB) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.min_conn_interval);
   \   000023 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000024 73                    MOV       B, A               ;; 1 cycle
   \   000025 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   000027 9800                  MOV       [SP], A            ;; 1 cycle
   \   000029 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00002B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00002C 63                    MOV       A, B               ;; 1 cycle
   \   00002D 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    195            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_MAX_CONN_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.max_conn_interval >> 8);
   \   00002F 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000031 9800                  MOV       [SP], A            ;; 1 cycle
   \   000033 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000035 70                    MOV       X, A               ;; 1 cycle
   \   000036 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000038 F0                    CLRB      X                  ;; 1 cycle
   \   000039 73                    MOV       B, A               ;; 1 cycle
   \   00003A 70                    MOV       X, A               ;; 1 cycle
   \   00003B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00003E 63                    MOV       A, B               ;; 1 cycle
   \   00003F 9A05                  MOV       [DE+0x05], A       ;; 1 cycle
    196            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_MAX_CONN_INTERVAL_LSB) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.max_conn_interval);
   \   000041 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000043 73                    MOV       B, A               ;; 1 cycle
   \   000044 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000046 9800                  MOV       [SP], A            ;; 1 cycle
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004B 63                    MOV       A, B               ;; 1 cycle
   \   00004C 9A04                  MOV       [DE+0x04], A       ;; 1 cycle
    197            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_SLAVE_LATENCY_MSB    ) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.slave_latency >> 8);
   \   00004E 8C04                  MOV       A, [HL+0x04]       ;; 1 cycle
   \   000050 9800                  MOV       [SP], A            ;; 1 cycle
   \   000052 8C05                  MOV       A, [HL+0x05]       ;; 1 cycle
   \   000054 70                    MOV       X, A               ;; 1 cycle
   \   000055 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000057 F0                    CLRB      X                  ;; 1 cycle
   \   000058 73                    MOV       B, A               ;; 1 cycle
   \   000059 70                    MOV       X, A               ;; 1 cycle
   \   00005A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005C 14                    MOVW      DE, AX             ;; 1 cycle
   \   00005D 63                    MOV       A, B               ;; 1 cycle
   \   00005E 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
    198            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_SLAVE_LATENCY_LSB    ) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.slave_latency);
   \   000060 8C04                  MOV       A, [HL+0x04]       ;; 1 cycle
   \   000062 73                    MOV       B, A               ;; 1 cycle
   \   000063 8C05                  MOV       A, [HL+0x05]       ;; 1 cycle
   \   000065 72                    MOV       C, A               ;; 1 cycle
   \   000066 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000068 14                    MOVW      DE, AX             ;; 1 cycle
   \   000069 63                    MOV       A, B               ;; 1 cycle
   \   00006A 9A06                  MOV       [DE+0x06], A       ;; 1 cycle
    199            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_TIMEOUT_MULT_MSB     ) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.timeout_mult >> 8);
   \   00006C 8C06                  MOV       A, [HL+0x06]       ;; 1 cycle
   \   00006E 73                    MOV       B, A               ;; 1 cycle
   \   00006F 8C07                  MOV       A, [HL+0x07]       ;; 1 cycle
   \   000071 70                    MOV       X, A               ;; 1 cycle
   \   000072 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000074 F0                    CLRB      X                  ;; 1 cycle
   \   000075 70                    MOV       X, A               ;; 1 cycle
   \   000076 60                    MOV       A, X               ;; 1 cycle
   \   000077 35                    XCHW      AX, DE             ;; 1 cycle
   \   000078 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00007A 35                    XCHW      AX, DE             ;; 1 cycle
   \   00007B 9A09                  MOV       [DE+0x09], A       ;; 1 cycle
    200            *(buffer + OFFSET_ACI_CMD_T_CHANGE_TIMING + OFFSET_ACI_CMD_PARAMS_CHANGE_TIMING_T_CONN_PARAMS + OFFSET_ACI_LL_CONN_PARAMS_T_TIMEOUT_MULT_LSB     ) = (uint8_t)(p_aci_cmd_params_change_timing->conn_params.timeout_mult);
   \   00007D 8C06                  MOV       A, [HL+0x06]       ;; 1 cycle
   \   00007F 74                    MOV       E, A               ;; 1 cycle
   \   000080 8C07                  MOV       A, [HL+0x07]       ;; 1 cycle
   \   000082 75                    MOV       D, A               ;; 1 cycle
   \   000083 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000085 16                    MOVW      HL, AX             ;; 1 cycle
   \   000086 64                    MOV       A, E               ;; 1 cycle
   \   000087 9C08                  MOV       [HL+0x08], A       ;; 1 cycle
    201          }
   \   000089 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00008B C4                    POP       DE                 ;; 1 cycle
   \   00008C D7                    RET                          ;; 6 cycles
   \   00008D                       ; ------------------------------------- Block: 102 cycles
   \   00008D                       ; ------------------------------------- Total: 102 cycles
   \   00008D                       REQUIRE ?CLRL78_V1_0_L00
    202          

   \                                 In  segment CODE, align 1, keep-with-next
    203          void acil_encode_cmd_set_app_latency(uint8_t *buffer, aci_cmd_params_set_app_latency_t *p_aci_cmd_params_set_app_latency)
   \                     acil_encode_cmd_set_app_latency:
    204          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    205            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_SET_APP_LATENCY_LEN;
   \   000004 5104                  MOV       A, #0x4            ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    206            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SET_APP_LATENCY;
   \   000007 5119                  MOV       A, #0x19           ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    207            *(buffer + OFFSET_ACI_CMD_T_SET_APP_LATENCY + OFFSET_ACI_CMD_PARAMS_SET_APP_LATENCY_T_MODE) = (uint8_t)( p_aci_cmd_params_set_app_latency->mode);
   \   00000B 89                    MOV       A, [DE]            ;; 1 cycle
   \   00000C 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    208            *(buffer + OFFSET_ACI_CMD_T_SET_APP_LATENCY + OFFSET_ACI_CMD_PARAMS_SET_APP_LATENCY_T_LATENCY_MSB) = (uint8_t)( p_aci_cmd_params_set_app_latency->latency>>8);
   \   00000E 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   000010 73                    MOV       B, A               ;; 1 cycle
   \   000011 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000013 70                    MOV       X, A               ;; 1 cycle
   \   000014 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000016 F0                    CLRB      X                  ;; 1 cycle
   \   000017 70                    MOV       X, A               ;; 1 cycle
   \   000018 60                    MOV       A, X               ;; 1 cycle
   \   000019 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
    209            *(buffer + OFFSET_ACI_CMD_T_SET_APP_LATENCY + OFFSET_ACI_CMD_PARAMS_SET_APP_LATENCY_T_LATENCY_LSB) = (uint8_t)( p_aci_cmd_params_set_app_latency->latency);
   \   00001B 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   00001D 70                    MOV       X, A               ;; 1 cycle
   \   00001E 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000020 72                    MOV       C, A               ;; 1 cycle
   \   000021 60                    MOV       A, X               ;; 1 cycle
   \   000022 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    210          }
   \   000024 C4                    POP       DE                 ;; 1 cycle
   \   000025 D7                    RET                          ;; 6 cycles
   \   000026                       ; ------------------------------------- Block: 32 cycles
   \   000026                       ; ------------------------------------- Total: 32 cycles
   \   000026                       REQUIRE ?CLRL78_V1_0_L00
    211          

   \                                 In  segment CODE, align 1, keep-with-next
    212          void acil_encode_cmd_change_timing_req_GAP_PPCP(uint8_t *buffer)
   \                     acil_encode_cmd_change_timing_req_GAP_PPCP:
    213          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    214            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_CHANGE_TIMING_LEN_GAP_PPCP;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    215            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_CHANGE_TIMING;
   \   000003 5113                  MOV       A, #0x13           ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    216          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    217          
    218          

   \                                 In  segment CODE, align 1, keep-with-next
    219          void acil_encode_cmd_setup(uint8_t *buffer, aci_cmd_params_setup_t *p_aci_cmd_params_setup, uint8_t setup_data_size)
   \                     acil_encode_cmd_setup:
    220          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 2
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    221            *(buffer + OFFSET_ACI_CMD_T_LEN) = setup_data_size + MSG_SETUP_CMD_BASE_LEN;
   \   000003 65                    MOV       A, D               ;; 1 cycle
   \   000004 81                    INC       A                  ;; 1 cycle
   \   000005 9B                    MOV       [HL], A            ;; 1 cycle
    222            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SETUP;
   \   000006 5106                  MOV       A, #0x6            ;; 1 cycle
   \   000008 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    223            memcpy((buffer + OFFSET_ACI_CMD_T_SETUP), &(p_aci_cmd_params_setup->setup_data[0]), setup_data_size);
   \   00000A 65                    MOV       A, D               ;; 1 cycle
   \   00000B 72                    MOV       C, A               ;; 1 cycle
   \   00000C 75                    MOV       D, A               ;; 1 cycle
   \   00000D F3                    CLRB      B                  ;; 1 cycle
   \   00000E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000010 14                    MOVW      DE, AX             ;; 1 cycle
   \   000011 A7                    INCW      HL                 ;; 1 cycle
   \   000012 A7                    INCW      HL                 ;; 1 cycle
   \   000013 13                    MOVW      AX, BC             ;; 1 cycle
   \   000014 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    224          }
   \   000017 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000019 C4                    POP       DE                 ;; 1 cycle
   \   00001A D7                    RET                          ;; 6 cycles
   \   00001B                       ; ------------------------------------- Block: 28 cycles
   \   00001B                       ; ------------------------------------- Total: 28 cycles
   \   00001B                       REQUIRE ?CLRL78_V1_0_L00
    225          

   \                                 In  segment CODE, align 1, keep-with-next
    226          void acil_encode_cmd_dtm_cmd(uint8_t *buffer, aci_cmd_params_dtm_cmd_t *p_aci_cmd_params_dtm_cmd)
   \                     acil_encode_cmd_dtm_cmd:
    227          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    228            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_DTM_CMD;
   \   000004 5103                  MOV       A, #0x3            ;; 1 cycle
   \   000006 99                    MOV       [DE], A            ;; 1 cycle
    229            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_DTM_CMD;
   \   000007 5103                  MOV       A, #0x3            ;; 1 cycle
   \   000009 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    230            *(buffer + OFFSET_ACI_CMD_T_DTM_CMD) = p_aci_cmd_params_dtm_cmd->cmd_msb;
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    231            *(buffer + OFFSET_ACI_CMD_T_DTM_CMD + 1) = p_aci_cmd_params_dtm_cmd->cmd_lsb;
   \   00000E 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   000010 9A03                  MOV       [DE+0x03], A       ;; 1 cycle
    232          }
   \   000012 C4                    POP       DE                 ;; 1 cycle
   \   000013 D7                    RET                          ;; 6 cycles
   \   000014                       ; ------------------------------------- Block: 19 cycles
   \   000014                       ; ------------------------------------- Total: 19 cycles
   \   000014                       REQUIRE ?CLRL78_V1_0_L00
    233          

   \                                 In  segment CODE, align 1, keep-with-next
    234          void acil_encode_cmd_send_data_ack(uint8_t *buffer, const uint8_t pipe_number )
   \                     acil_encode_cmd_send_data_ack:
    235          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    236            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_ACK_LEN;
   \   000001 5102                  MOV       A, #0x2            ;; 1 cycle
   \   000003 9B                    MOV       [HL], A            ;; 1 cycle
    237            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SEND_DATA_ACK;
   \   000004 5116                  MOV       A, #0x16           ;; 1 cycle
   \   000006 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    238            *(buffer + OFFSET_ACI_CMD_T_SEND_DATA_ACK + OFFSET_ACI_CMD_PARAMS_SEND_DATA_ACK_T_PIPE_NUMBER) = pipe_number;
   \   000008 63                    MOV       A, B               ;; 1 cycle
   \   000009 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    239          }
   \   00000B D7                    RET                          ;; 6 cycles
   \   00000C                       ; ------------------------------------- Block: 13 cycles
   \   00000C                       ; ------------------------------------- Total: 13 cycles
   \   00000C                       REQUIRE ?CLRL78_V1_0_L00
    240          

   \                                 In  segment CODE, align 1, keep-with-next
    241          void acil_encode_cmd_send_data_nack(uint8_t *buffer, const uint8_t pipe_number, const uint8_t err_code )
   \                     acil_encode_cmd_send_data_nack:
    242          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    243            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_NACK_LEN;
   \   000001 5103                  MOV       A, #0x3            ;; 1 cycle
   \   000003 9B                    MOV       [HL], A            ;; 1 cycle
    244            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SEND_DATA_NACK;
   \   000004 5118                  MOV       A, #0x18           ;; 1 cycle
   \   000006 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    245            *(buffer + OFFSET_ACI_CMD_T_SEND_DATA_NACK + OFFSET_ACI_CMD_PARAMS_SEND_DATA_NACK_T_PIPE_NUMBER) = pipe_number;
   \   000008 63                    MOV       A, B               ;; 1 cycle
   \   000009 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    246            *(buffer + OFFSET_ACI_CMD_T_SEND_DATA_NACK + OFFSET_ACI_CMD_PARAMS_SEND_DATA_NACK_T_ERROR_CODE) = err_code;
   \   00000B 62                    MOV       A, C               ;; 1 cycle
   \   00000C 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    247          }
   \   00000E D7                    RET                          ;; 6 cycles
   \   00000F                       ; ------------------------------------- Block: 15 cycles
   \   00000F                       ; ------------------------------------- Total: 15 cycles
   \   00000F                       REQUIRE ?CLRL78_V1_0_L00
    248          

   \                                 In  segment CODE, align 1, keep-with-next
    249          void acil_encode_cmd_bond_security_request(uint8_t *buffer)
   \                     acil_encode_cmd_bond_security_request:
    250          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000                       ; Auto size: 0
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    251            *(buffer + OFFSET_ACI_CMD_T_LEN) = 1;
   \   000001 E1                    ONEB      A                  ;; 1 cycle
   \   000002 9B                    MOV       [HL], A            ;; 1 cycle
    252            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_BOND_SECURITY_REQUEST;
   \   000003 511D                  MOV       A, #0x1D           ;; 1 cycle
   \   000005 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    253          }
   \   000007 D7                    RET                          ;; 6 cycles
   \   000008                       ; ------------------------------------- Block: 11 cycles
   \   000008                       ; ------------------------------------- Total: 11 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    254          

   \                                 In  segment CODE, align 1, keep-with-next
    255          void acil_encode_cmd_broadcast(uint8_t *buffer, aci_cmd_params_broadcast_t * p_aci_cmd_params_broadcast)
   \                     acil_encode_cmd_broadcast:
    256          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
    257            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_BROADCAST_LEN;
   \   000003 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000008 9B                    MOV       [HL], A            ;; 1 cycle
    258            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_BROADCAST;
   \   000009 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000B A1                    INCW      AX                 ;; 1 cycle
   \   00000C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000D 511C                  MOV       A, #0x1C           ;; 1 cycle
   \   00000F 9B                    MOV       [HL], A            ;; 1 cycle
    259            *(buffer + OFFSET_ACI_CMD_T_BROADCAST + OFFSET_ACI_CMD_PARAMS_BROADCAST_T_TIMEOUT_LSB) = (p_aci_cmd_params_broadcast->timeout & 0xff);
   \   000010 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000012 16                    MOVW      HL, AX             ;; 1 cycle
   \   000013 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000014 73                    MOV       B, A               ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 A7                    INCW      HL                 ;; 1 cycle
   \   000019 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00001A 74                    MOV       E, A               ;; 1 cycle
   \   00001B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001E 63                    MOV       A, B               ;; 1 cycle
   \   00001F 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    260            *(buffer + OFFSET_ACI_CMD_T_BROADCAST + OFFSET_ACI_CMD_PARAMS_BROADCAST_T_TIMEOUT_MSB) = (uint8_t)(p_aci_cmd_params_broadcast->timeout >> 8);
   \   000021 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000023 16                    MOVW      HL, AX             ;; 1 cycle
   \   000024 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000025 75                    MOV       D, A               ;; 1 cycle
   \   000026 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000028 16                    MOVW      HL, AX             ;; 1 cycle
   \   000029 A7                    INCW      HL                 ;; 1 cycle
   \   00002A 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00002B 70                    MOV       X, A               ;; 1 cycle
   \   00002C 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00002E F0                    CLRB      X                  ;; 1 cycle
   \   00002F 73                    MOV       B, A               ;; 1 cycle
   \   000030 70                    MOV       X, A               ;; 1 cycle
   \   000031 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000033 16                    MOVW      HL, AX             ;; 1 cycle
   \   000034 63                    MOV       A, B               ;; 1 cycle
   \   000035 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    261            *(buffer + OFFSET_ACI_CMD_T_BROADCAST + OFFSET_ACI_CMD_PARAMS_BROADCAST_T_ADV_INTERVAL_LSB) = (p_aci_cmd_params_broadcast->adv_interval & 0xff);
   \   000037 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000039 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003A 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   00003C 70                    MOV       X, A               ;; 1 cycle
   \   00003D 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000040 37                    XCHW      AX, HL             ;; 1 cycle
   \   000041 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000043 72                    MOV       C, A               ;; 1 cycle
   \   000044 60                    MOV       A, X               ;; 1 cycle
   \   000045 73                    MOV       B, A               ;; 1 cycle
   \   000046 70                    MOV       X, A               ;; 1 cycle
   \   000047 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000049 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004A 63                    MOV       A, B               ;; 1 cycle
   \   00004B 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
    262            *(buffer + OFFSET_ACI_CMD_T_BROADCAST + OFFSET_ACI_CMD_PARAMS_BROADCAST_T_ADV_INTERVAL_MSB) = (uint8_t)(p_aci_cmd_params_broadcast->adv_interval >> 8);
   \   00004D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00004F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000050 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000052 73                    MOV       B, A               ;; 1 cycle
   \   000053 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000055 16                    MOVW      HL, AX             ;; 1 cycle
   \   000056 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   000058 70                    MOV       X, A               ;; 1 cycle
   \   000059 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00005B F0                    CLRB      X                  ;; 1 cycle
   \   00005C 70                    MOV       X, A               ;; 1 cycle
   \   00005D 60                    MOV       A, X               ;; 1 cycle
   \   00005E 37                    XCHW      AX, HL             ;; 1 cycle
   \   00005F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000061 37                    XCHW      AX, HL             ;; 1 cycle
   \   000062 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
    263          }
   \   000064 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000066 C4                    POP       DE                 ;; 1 cycle
   \   000067 D7                    RET                          ;; 6 cycles
   \   000068                       ; ------------------------------------- Block: 82 cycles
   \   000068                       ; ------------------------------------- Total: 82 cycles
   \   000068                       REQUIRE ?CLRL78_V1_0_L00
    264            

   \                                 In  segment CODE, align 1, keep-with-next
    265          void acil_encode_cmd_open_adv_pipes(uint8_t *buffer, aci_cmd_params_open_adv_pipe_t * p_aci_cmd_params_open_adv_pipe)
   \                     acil_encode_cmd_open_adv_pipes:
    266          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    267            *(buffer + OFFSET_ACI_CMD_T_LEN) = MSG_OPEN_ADV_PIPES_LEN;
   \   000004 5109                  MOV       A, #0x9            ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    268            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_OPEN_ADV_PIPE;
   \   000007 511B                  MOV       A, #0x1B           ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    269            memcpy(buffer + OFFSET_ACI_CMD_T_OPEN_ADV_PIPE + OFFSET_ACI_CMD_PARAMS_OPEN_ADV_PIPE_T_PIPES, p_aci_cmd_params_open_adv_pipe->pipes, 8);
   \   00000B A7                    INCW      HL                 ;; 1 cycle
   \   00000C A7                    INCW      HL                 ;; 1 cycle
   \   00000D 5308                  MOV       B, #0x8            ;; 1 cycle
   \   00000F FD....                CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
    270          }
   \   000012 C4                    POP       DE                 ;; 1 cycle
   \   000013 D7                    RET                          ;; 6 cycles
   \   000014                       ; ------------------------------------- Block: 21 cycles
   \   000014                       ; ------------------------------------- Total: 21 cycles
   \   000014                       REQUIRE ?CLRL78_V1_0_L00
    271          
    272          

   \                                 In  segment CODE, align 1, keep-with-next
    273          void acil_encode_cmd_set_key(uint8_t *buffer, aci_cmd_params_set_key_t *p_aci_cmd_params_set_key)
   \                     acil_encode_cmd_set_key:
    274          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    275            /*
    276            The length of the key is computed based on the type of key transaction.
    277            - Key Reject
    278            - Key type is passkey
    279            */
    280            uint8_t len;
    281          
    282            switch (p_aci_cmd_params_set_key->key_type)
   \   000004 89                    MOV       A, [DE]            ;; 1 cycle
   \   000005 D1                    CMP0      A                  ;; 1 cycle
   \   000006 DD05                  BZ        ??acil_decode_evt_0  ;; 4 cycles
   \   000008                       ; ------------------------------------- Block: 10 cycles
   \   000008 91                    DEC       A                  ;; 1 cycle
   \   000009 DD06                  BZ        ??acil_decode_evt_1  ;; 4 cycles
   \   00000B                       ; ------------------------------------- Block: 5 cycles
   \   00000B EF08                  BR        S:??acil_decode_evt_2  ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 3 cycles
    283            {
    284              case ACI_KEY_TYPE_INVALID:
    285              len = MSG_SET_KEY_REJECT_LEN;
   \                     ??acil_decode_evt_0:
   \   00000D 5002                  MOV       X, #0x2            ;; 1 cycle
    286              break;
   \   00000F EF05                  BR        S:??acil_decode_evt_3  ;; 3 cycles
   \   000011                       ; ------------------------------------- Block: 4 cycles
    287              case ACI_KEY_TYPE_PASSKEY:
    288              len = MSG_SET_KEY_PASSKEY_LEN;
   \                     ??acil_decode_evt_1:
   \   000011 5008                  MOV       X, #0x8            ;; 1 cycle
    289              break;
   \   000013 EF01                  BR        S:??acil_decode_evt_3  ;; 3 cycles
   \   000015                       ; ------------------------------------- Block: 4 cycles
    290              default:
    291              len=0;
   \                     ??acil_decode_evt_2:
   \   000015 F0                    CLRB      X                  ;; 1 cycle
    292              break;
   \   000016                       ; ------------------------------------- Block: 1 cycles
    293            }
    294            *(buffer + OFFSET_ACI_CMD_T_LEN) = len;
   \                     ??acil_decode_evt_3:
   \   000016 60                    MOV       A, X               ;; 1 cycle
   \   000017 9B                    MOV       [HL], A            ;; 1 cycle
    295            *(buffer + OFFSET_ACI_CMD_T_CMD_OPCODE) = ACI_CMD_SET_KEY;
   \   000018 511A                  MOV       A, #0x1A           ;; 1 cycle
   \   00001A 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    296            *(buffer + OFFSET_ACI_CMD_T_SET_KEY + OFFSET_ACI_CMD_PARAMS_SET_KEY_T_KEY_TYPE) = p_aci_cmd_params_set_key->key_type;
   \   00001C 89                    MOV       A, [DE]            ;; 1 cycle
   \   00001D 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    297            memcpy((buffer + OFFSET_ACI_CMD_T_SET_KEY + OFFSET_ACI_CMD_PARAMS_SET_KEY_T_PASSKEY), (uint8_t * )&(p_aci_cmd_params_set_key->key), len-2);//Reducing 2 for the opcode byte and type
   \   00001F F1                    CLRB      A                  ;; 1 cycle
   \   000020 04FEFF                ADDW      AX, #0xFFFE        ;; 1 cycle
   \   000023 12                    MOVW      BC, AX             ;; 1 cycle
   \   000024 A5                    INCW      DE                 ;; 1 cycle
   \   000025 A7                    INCW      HL                 ;; 1 cycle
   \   000026 A7                    INCW      HL                 ;; 1 cycle
   \   000027 A7                    INCW      HL                 ;; 1 cycle
   \   000028 13                    MOVW      AX, BC             ;; 1 cycle
   \   000029 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    298          }
   \   00002C C4                    POP       DE                 ;; 1 cycle
   \   00002D D7                    RET                          ;; 6 cycles
   \   00002E                       ; ------------------------------------- Block: 24 cycles
   \   00002E                       ; ------------------------------------- Total: 51 cycles
   \   00002E                       REQUIRE ?CLRL78_V1_0_L00
    299          

   \                                 In  segment CODE, align 1, keep-with-next
    300          bool acil_encode_cmd(uint8_t *buffer, aci_cmd_t *p_aci_cmd)
   \                     acil_encode_cmd:
    301          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 6
   \   000003 C1                    PUSH      AX                 ;; 1 cycle
    302            bool ret_val = false;
   \   000004 F1                    CLRB      A                  ;; 1 cycle
   \   000005 9800                  MOV       [SP], A            ;; 1 cycle
    303          
    304            switch(p_aci_cmd->cmd_opcode)
   \   000007 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000009 A1                    INCW      AX                 ;; 1 cycle
   \   00000A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000B 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00000C 36....                MOVW      HL, #LWRD(??acil_encode_cmd_0)  ;; 1 cycle
   \   00000F 41..                  MOV       ES, #BYTE3(??acil_encode_cmd_0)  ;; 1 cycle
   \   000011 CEFC..                MOV       CS, #BYTE3(acil_encode_cmd)  ;; 1 cycle
   \   000014 ED....                BR        N:?C_SSWITCH_L10   ;; 3 cycles
   \   000017                       ; ------------------------------------- Block: 16 cycles
    305            {
    306              case ACI_CMD_TEST:
    307                acil_encode_cmd_set_test_mode(buffer, &(p_aci_cmd->params.test));
   \                     ??acil_encode_cmd_1:
   \   000017 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000019 12                    MOVW      BC, AX             ;; 1 cycle
   \   00001A A3                    INCW      BC                 ;; 1 cycle
   \   00001B A3                    INCW      BC                 ;; 1 cycle
   \   00001C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00001E FD....                CALL      acil_encode_cmd_set_test_mode  ;; 3 cycles
    308                break;
   \   000021 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000024                       ; ------------------------------------- Block: 11 cycles
    309              case ACI_CMD_SLEEP:
    310                acil_encode_cmd_sleep(buffer);
   \                     ??acil_encode_cmd_2:
   \   000024 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000026 FD....                CALL      acil_encode_cmd_sleep  ;; 3 cycles
    311                break;
   \   000029 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00002C                       ; ------------------------------------- Block: 7 cycles
    312              case ACI_CMD_GET_DEVICE_VERSION:
    313                acil_encode_cmd_get_device_version(buffer);
   \                     ??acil_encode_cmd_3:
   \   00002C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00002E FD....                CALL      acil_encode_cmd_get_device_version  ;; 3 cycles
    314                break;
   \   000031 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000034                       ; ------------------------------------- Block: 7 cycles
    315              case ACI_CMD_WAKEUP:
    316                acil_encode_cmd_wakeup(buffer);
   \                     ??acil_encode_cmd_4:
   \   000034 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000036 FD....                CALL      acil_encode_cmd_wakeup  ;; 3 cycles
    317                break;
   \   000039 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00003C                       ; ------------------------------------- Block: 7 cycles
    318              case ACI_CMD_ECHO:
    319                acil_encode_cmd_echo_msg(buffer, &(p_aci_cmd->params.echo), (p_aci_cmd->len - MSG_ECHO_MSG_CMD_BASE_LEN));
   \                     ??acil_encode_cmd_5:
   \   00003C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003F 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000040 75                    MOV       D, A               ;; 1 cycle
   \   000041 95                    DEC       D                  ;; 1 cycle
   \   000042 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000044 12                    MOVW      BC, AX             ;; 1 cycle
   \   000045 A3                    INCW      BC                 ;; 1 cycle
   \   000046 A3                    INCW      BC                 ;; 1 cycle
   \   000047 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000049 FD....                CALL      acil_encode_cmd_echo_msg  ;; 3 cycles
    320                break;
   \   00004C ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00004F                       ; ------------------------------------- Block: 16 cycles
    321              case ACI_CMD_GET_BATTERY_LEVEL:
    322                acil_encode_cmd_battery_level(buffer);
   \                     ??acil_encode_cmd_6:
   \   00004F A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000051 FD....                CALL      acil_encode_cmd_battery_level  ;; 3 cycles
    323                break;
   \   000054 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000057                       ; ------------------------------------- Block: 7 cycles
    324              case ACI_CMD_GET_TEMPERATURE:
    325                acil_encode_cmd_temparature(buffer);
   \                     ??acil_encode_cmd_7:
   \   000057 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000059 FD....                CALL      acil_encode_cmd_temparature  ;; 3 cycles
    326                break;
   \   00005C ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00005F                       ; ------------------------------------- Block: 7 cycles
    327              case ACI_CMD_GET_DEVICE_ADDRESS:
    328                acil_encode_cmd_get_address(buffer);
   \                     ??acil_encode_cmd_8:
   \   00005F A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000061 FD....                CALL      acil_encode_cmd_get_address  ;; 3 cycles
    329                break;
   \   000064 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000067                       ; ------------------------------------- Block: 7 cycles
    330              case ACI_CMD_SET_TX_POWER:
    331                acil_encode_cmd_set_radio_tx_power(buffer, &(p_aci_cmd->params.set_tx_power));
   \                     ??acil_encode_cmd_9:
   \   000067 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000069 12                    MOVW      BC, AX             ;; 1 cycle
   \   00006A A3                    INCW      BC                 ;; 1 cycle
   \   00006B A3                    INCW      BC                 ;; 1 cycle
   \   00006C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00006E FD....                CALL      acil_encode_cmd_set_radio_tx_power  ;; 3 cycles
    332                break;
   \   000071 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000074                       ; ------------------------------------- Block: 11 cycles
    333              case ACI_CMD_CONNECT:
    334                acil_encode_cmd_connect(buffer, &(p_aci_cmd->params.connect));
   \                     ??acil_encode_cmd_10:
   \   000074 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000076 12                    MOVW      BC, AX             ;; 1 cycle
   \   000077 A3                    INCW      BC                 ;; 1 cycle
   \   000078 A3                    INCW      BC                 ;; 1 cycle
   \   000079 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00007B FD....                CALL      acil_encode_cmd_connect  ;; 3 cycles
    335                break;
   \   00007E ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   000081                       ; ------------------------------------- Block: 11 cycles
    336              case ACI_CMD_BOND:
    337                acil_encode_cmd_bond(buffer, &(p_aci_cmd->params.bond));
   \                     ??acil_encode_cmd_11:
   \   000081 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000083 12                    MOVW      BC, AX             ;; 1 cycle
   \   000084 A3                    INCW      BC                 ;; 1 cycle
   \   000085 A3                    INCW      BC                 ;; 1 cycle
   \   000086 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000088 FD....                CALL      acil_encode_cmd_bond  ;; 3 cycles
    338                break;
   \   00008B ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00008E                       ; ------------------------------------- Block: 11 cycles
    339              case ACI_CMD_DISCONNECT:
    340                acil_encode_cmd_disconnect(buffer, &(p_aci_cmd->params.disconnect));
   \                     ??acil_encode_cmd_12:
   \   00008E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000090 12                    MOVW      BC, AX             ;; 1 cycle
   \   000091 A3                    INCW      BC                 ;; 1 cycle
   \   000092 A3                    INCW      BC                 ;; 1 cycle
   \   000093 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000095 FD....                CALL      acil_encode_cmd_disconnect  ;; 3 cycles
    341                break;
   \   000098 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   00009B                       ; ------------------------------------- Block: 11 cycles
    342              case ACI_CMD_RADIO_RESET:
    343                acil_encode_baseband_reset(buffer);
   \                     ??acil_encode_cmd_13:
   \   00009B A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00009D FD....                CALL      acil_encode_baseband_reset  ;; 3 cycles
    344                break;
   \   0000A0 ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   0000A3                       ; ------------------------------------- Block: 7 cycles
    345              case ACI_CMD_CHANGE_TIMING:
    346                acil_encode_cmd_change_timing_req(buffer, &(p_aci_cmd->params.change_timing));
   \                     ??acil_encode_cmd_14:
   \   0000A3 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000A5 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000A6 A3                    INCW      BC                 ;; 1 cycle
   \   0000A7 A3                    INCW      BC                 ;; 1 cycle
   \   0000A8 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000AA FD....                CALL      acil_encode_cmd_change_timing_req  ;; 3 cycles
    347                break;
   \   0000AD ED....                BR        N:??acil_decode_evt_4  ;; 3 cycles
   \   0000B0                       ; ------------------------------------- Block: 11 cycles
    348              case ACI_CMD_SETUP:
    349                acil_encode_cmd_setup(buffer, &(p_aci_cmd->params.setup), (p_aci_cmd->len - MSG_SETUP_CMD_BASE_LEN));
   \                     ??acil_encode_cmd_15:
   \   0000B0 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000B2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000B3 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0000B4 75                    MOV       D, A               ;; 1 cycle
   \   0000B5 95                    DEC       D                  ;; 1 cycle
   \   0000B6 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000B8 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B9 A3                    INCW      BC                 ;; 1 cycle
   \   0000BA A3                    INCW      BC                 ;; 1 cycle
   \   0000BB A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000BD FD....                CALL      acil_encode_cmd_setup  ;; 3 cycles
    350                break;
   \   0000C0 EF7D                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   0000C2                       ; ------------------------------------- Block: 16 cycles
    351              case ACI_CMD_DTM_CMD:
    352                acil_encode_cmd_dtm_cmd(buffer, &(p_aci_cmd->params.dtm_cmd));
   \                     ??acil_encode_cmd_16:
   \   0000C2 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000C4 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000C5 A3                    INCW      BC                 ;; 1 cycle
   \   0000C6 A3                    INCW      BC                 ;; 1 cycle
   \   0000C7 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000C9 FD....                CALL      acil_encode_cmd_dtm_cmd  ;; 3 cycles
    353                break;
   \   0000CC EF71                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   0000CE                       ; ------------------------------------- Block: 11 cycles
    354              case ACI_CMD_READ_DYNAMIC_DATA:
    355                acil_encode_cmd_read_dynamic_data(buffer);
   \                     ??acil_encode_cmd_17:
   \   0000CE A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000D0 FD....                CALL      acil_encode_cmd_read_dynamic_data  ;; 3 cycles
    356                break;
   \   0000D3 EF6A                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   0000D5                       ; ------------------------------------- Block: 7 cycles
    357              case ACI_CMD_WRITE_DYNAMIC_DATA:
    358                acil_encode_cmd_write_dynamic_data(buffer, p_aci_cmd->params.write_dynamic_data.seq_no, &(p_aci_cmd->params.write_dynamic_data.dynamic_data[0]), (p_aci_cmd->len - MSG_WRITE_DYNAMIC_DATA_BASE_LEN));
   \                     ??acil_encode_cmd_18:
   \   0000D5 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000D7 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000D8 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0000D9 0CFE                  ADD       A, #0xFE           ;; 1 cycle
   \   0000DB 72                    MOV       C, A               ;; 1 cycle
   \   0000DC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000DE 040300                ADDW      AX, #0x3           ;; 1 cycle
   \   0000E1 14                    MOVW      DE, AX             ;; 1 cycle
   \   0000E2 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000E4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000E5 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   0000E7 73                    MOV       B, A               ;; 1 cycle
   \   0000E8 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000EA FD....                CALL      acil_encode_cmd_write_dynamic_data  ;; 3 cycles
    359                break;
   \   0000ED EF50                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   0000EF                       ; ------------------------------------- Block: 19 cycles
    360              case ACI_CMD_OPEN_REMOTE_PIPE:
    361                acil_encode_cmd_open_remote_pipe(buffer, &(p_aci_cmd->params.open_remote_pipe));
   \                     ??acil_encode_cmd_19:
   \   0000EF A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000F1 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000F2 A3                    INCW      BC                 ;; 1 cycle
   \   0000F3 A3                    INCW      BC                 ;; 1 cycle
   \   0000F4 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000F6 FD....                CALL      acil_encode_cmd_open_remote_pipe  ;; 3 cycles
    362                break;
   \   0000F9 EF44                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   0000FB                       ; ------------------------------------- Block: 11 cycles
    363              case ACI_CMD_SEND_DATA:
    364                acil_encode_cmd_send_data(buffer, &(p_aci_cmd->params.send_data), (p_aci_cmd->len - MSG_SEND_DATA_BASE_LEN));
   \                     ??acil_encode_cmd_20:
   \   0000FB A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000FD 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000FE 8B                    MOV       A, [HL]            ;; 1 cycle
   \   0000FF 0CFE                  ADD       A, #0xFE           ;; 1 cycle
   \   000101 75                    MOV       D, A               ;; 1 cycle
   \   000102 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000104 12                    MOVW      BC, AX             ;; 1 cycle
   \   000105 A3                    INCW      BC                 ;; 1 cycle
   \   000106 A3                    INCW      BC                 ;; 1 cycle
   \   000107 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000109 FD....                CALL      acil_encode_cmd_send_data  ;; 3 cycles
    365                break;
   \   00010C EF31                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   00010E                       ; ------------------------------------- Block: 16 cycles
    366              case ACI_CMD_SEND_DATA_ACK:
    367                acil_encode_cmd_send_data_ack(buffer, p_aci_cmd->params.send_data_ack.pipe_number );
   \                     ??acil_encode_cmd_21:
   \   00010E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000110 16                    MOVW      HL, AX             ;; 1 cycle
   \   000111 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000113 73                    MOV       B, A               ;; 1 cycle
   \   000114 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000116 FD....                CALL      acil_encode_cmd_send_data_ack  ;; 3 cycles
    368                break;
   \   000119 EF24                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   00011B                       ; ------------------------------------- Block: 11 cycles
    369              case ACI_CMD_REQUEST_DATA:
    370                acil_encode_cmd_request_data(buffer, &(p_aci_cmd->params.request_data));
   \                     ??acil_encode_cmd_22:
   \   00011B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00011D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00011E A3                    INCW      BC                 ;; 1 cycle
   \   00011F A3                    INCW      BC                 ;; 1 cycle
   \   000120 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000122 FD....                CALL      acil_encode_cmd_request_data  ;; 3 cycles
    371                break;
   \   000125 EF18                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   000127                       ; ------------------------------------- Block: 11 cycles
    372              case ACI_CMD_SET_LOCAL_DATA:
    373                acil_encode_cmd_set_local_data(buffer, (aci_cmd_params_set_local_data_t *)(&(p_aci_cmd->params.send_data)), (p_aci_cmd->len - MSG_SET_LOCAL_DATA_BASE_LEN));
   \                     ??acil_encode_cmd_23:
   \   000127 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000129 16                    MOVW      HL, AX             ;; 1 cycle
   \   00012A 8B                    MOV       A, [HL]            ;; 1 cycle
   \   00012B 0CFE                  ADD       A, #0xFE           ;; 1 cycle
   \   00012D 75                    MOV       D, A               ;; 1 cycle
   \   00012E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000130 12                    MOVW      BC, AX             ;; 1 cycle
   \   000131 A3                    INCW      BC                 ;; 1 cycle
   \   000132 A3                    INCW      BC                 ;; 1 cycle
   \   000133 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000135 FD....                CALL      acil_encode_cmd_set_local_data  ;; 3 cycles
    374                break;
   \   000138 EF05                  BR        S:??acil_decode_evt_4  ;; 3 cycles
   \   00013A                       ; ------------------------------------- Block: 16 cycles
    375              case ACI_CMD_BOND_SECURITY_REQUEST:
    376                acil_encode_cmd_bond_security_request(buffer);
   \                     ??acil_encode_cmd_24:
   \   00013A A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00013C FD....                CALL      acil_encode_cmd_bond_security_request  ;; 3 cycles
    377                break;
   \   00013F                       ; ------------------------------------- Block: 4 cycles
    378              default:
    379                break;
    380            }
    381            return ret_val;
   \                     ??acil_decode_evt_4:
   \   00013F 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000141 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   000143 C4                    POP       DE                 ;; 1 cycle
   \   000144 D7                    RET                          ;; 6 cycles
   \   000145                       ; ------------------------------------- Block: 9 cycles
   \   000145                       ; ------------------------------------- Total: 278 cycles
   \   000145                       REQUIRE ?CLRL78_V1_0_L00
    382          }
    383          

   \                                 In  segment CODE, align 1, keep-with-next
    384          void acil_decode_evt_command_response(uint8_t *buffer_in, aci_evt_params_cmd_rsp_t *p_evt_params_cmd_rsp)
   \                     acil_decode_evt_command_response:
    385          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 6
   \   000002 2004                  SUBW      SP, #0x4           ;; 1 cycle
   \   000004 C3                    PUSH      BC                 ;; 1 cycle
   \   000005 C6                    POP       HL                 ;; 1 cycle
    386            aci_evt_cmd_rsp_params_get_device_version_t *p_device_version;
    387            aci_evt_cmd_rsp_params_get_device_address_t *p_device_address;
    388            aci_evt_cmd_rsp_params_get_temperature_t    *p_temperature;
    389            aci_evt_cmd_rsp_params_get_battery_level_t  *p_batt_lvl;
    390            aci_evt_cmd_rsp_read_dynamic_data_t         *p_read_dyn_data;
    391            aci_evt_cmd_rsp_params_dtm_cmd_t            *p_dtm_evt;
    392          
    393            p_evt_params_cmd_rsp->cmd_opcode = (aci_cmd_opcode_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_CMD_OPCODE);
   \   000006 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000008 14                    MOVW      DE, AX             ;; 1 cycle
   \   000009 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   00000B 9B                    MOV       [HL], A            ;; 1 cycle
    394            p_evt_params_cmd_rsp->cmd_status = (aci_status_code_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_CMD_STATUS);
   \   00000C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00000E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000F 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000011 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    395          
    396            switch (p_evt_params_cmd_rsp->cmd_opcode)
   \   000013 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000014 2C03                  SUB       A, #0x3            ;; 1 cycle
   \   000016 61F8                  SKNZ                         ;; 4 cycles
   \   000018 ED....                BR        N:??acil_decode_evt_5  ;; 4 cycles
   \   00001B                       ; ------------------------------------- Block: 19 cycles
   \   00001B 2C04                  SUB       A, #0x4            ;; 1 cycle
   \   00001D 61F8                  SKNZ                         ;; 4 cycles
   \   00001F ED....                BR        N:??acil_decode_evt_6  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 5 cycles
   \   000022 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   000024 DD15                  BZ        ??acil_decode_evt_7  ;; 4 cycles
   \   000026                       ; ------------------------------------- Block: 5 cycles
   \   000026 91                    DEC       A                  ;; 1 cycle
   \   000027 61F8                  SKNZ                         ;; 4 cycles
   \   000029 ED....                BR        N:??acil_decode_evt_8  ;; 4 cycles
   \   00002C                       ; ------------------------------------- Block: 5 cycles
   \   00002C 91                    DEC       A                  ;; 1 cycle
   \   00002D 61F8                  SKNZ                         ;; 4 cycles
   \   00002F ED....                BR        N:??acil_decode_evt_9  ;; 4 cycles
   \   000032                       ; ------------------------------------- Block: 5 cycles
   \   000032 91                    DEC       A                  ;; 1 cycle
   \   000033 61F8                  SKNZ                         ;; 4 cycles
   \   000035 ED....                BR        N:??acil_decode_evt_10  ;; 4 cycles
   \   000038                       ; ------------------------------------- Block: 5 cycles
   \   000038 ED....                BR        N:??acil_decode_evt_11  ;; 3 cycles
   \   00003B                       ; ------------------------------------- Block: 3 cycles
    397            {
    398              case ACI_CMD_GET_DEVICE_VERSION:
    399                p_device_version = &(p_evt_params_cmd_rsp->params.get_device_version);
   \                     ??acil_decode_evt_7:
   \   00003B A7                    INCW      HL                 ;; 1 cycle
   \   00003C A7                    INCW      HL                 ;; 1 cycle
   \   00003D C7                    PUSH      HL                 ;; 1 cycle
   \   00003E C4                    POP       DE                 ;; 1 cycle
    400                p_device_version->configuration_id  = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_CONFIGURATION_ID_LSB);
   \   00003F A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000041 16                    MOVW      HL, AX             ;; 1 cycle
   \   000042 8C04                  MOV       A, [HL+0x04]       ;; 1 cycle
   \   000044 76                    MOV       L, A               ;; 1 cycle
   \   000045 5700                  MOV       H, #0x0            ;; 1 cycle
   \   000047 66                    MOV       A, L               ;; 1 cycle
   \   000048 99                    MOV       [DE], A            ;; 1 cycle
   \   000049 17                    MOVW      AX, HL             ;; 1 cycle
   \   00004A F0                    CLRB      X                  ;; 1 cycle
   \   00004B 70                    MOV       X, A               ;; 1 cycle
   \   00004C 60                    MOV       A, X               ;; 1 cycle
   \   00004D 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    401                p_device_version->configuration_id |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_CONFIGURATION_ID_MSB) << 8;
   \   00004F A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000051 16                    MOVW      HL, AX             ;; 1 cycle
   \   000052 8C05                  MOV       A, [HL+0x05]       ;; 1 cycle
   \   000054 70                    MOV       X, A               ;; 1 cycle
   \   000055 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000057 12                    MOVW      BC, AX             ;; 1 cycle
   \   000058 89                    MOV       A, [DE]            ;; 1 cycle
   \   000059 76                    MOV       L, A               ;; 1 cycle
   \   00005A 5700                  MOV       H, #0x0            ;; 1 cycle
   \   00005C 8A01                  MOV       A, [DE+0x01]       ;; 1 cycle
   \   00005E 70                    MOV       X, A               ;; 1 cycle
   \   00005F 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000061 616F                  OR        A, H               ;; 1 cycle
   \   000063 08                    XCH       A, X               ;; 1 cycle
   \   000064 616E                  OR        A, L               ;; 1 cycle
   \   000066 08                    XCH       A, X               ;; 1 cycle
   \   000067 616B                  OR        A, B               ;; 1 cycle
   \   000069 08                    XCH       A, X               ;; 1 cycle
   \   00006A 616A                  OR        A, C               ;; 1 cycle
   \   00006C 08                    XCH       A, X               ;; 1 cycle
   \   00006D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006E 66                    MOV       A, L               ;; 1 cycle
   \   00006F 99                    MOV       [DE], A            ;; 1 cycle
   \   000070 17                    MOVW      AX, HL             ;; 1 cycle
   \   000071 F0                    CLRB      X                  ;; 1 cycle
   \   000072 70                    MOV       X, A               ;; 1 cycle
   \   000073 60                    MOV       A, X               ;; 1 cycle
   \   000074 9A01                  MOV       [DE+0x01], A       ;; 1 cycle
    402                p_device_version->aci_version       = *(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_ACI_VERSION);
   \   000076 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000078 16                    MOVW      HL, AX             ;; 1 cycle
   \   000079 8C06                  MOV       A, [HL+0x06]       ;; 1 cycle
   \   00007B 9A02                  MOV       [DE+0x02], A       ;; 1 cycle
    403                p_device_version->setup_format      = *(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_FORMAT);
   \   00007D A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00007F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000080 8C07                  MOV       A, [HL+0x07]       ;; 1 cycle
   \   000082 9A03                  MOV       [DE+0x03], A       ;; 1 cycle
    404                p_device_version->setup_id          = (uint32_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_ID_LSB0);
   \   000084 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000086 16                    MOVW      HL, AX             ;; 1 cycle
   \   000087 8C08                  MOV       A, [HL+0x08]       ;; 1 cycle
   \   000089 70                    MOV       X, A               ;; 1 cycle
   \   00008A F1                    CLRB      A                  ;; 1 cycle
   \   00008B F7                    CLRW      BC                 ;; 1 cycle
   \   00008C FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00008F BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000090 33                    XCHW      AX, BC             ;; 1 cycle
   \   000091 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000093 33                    XCHW      AX, BC             ;; 1 cycle
   \   000094 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000096 9A04                  MOV       [DE+0x04], A       ;; 1 cycle
   \   000098 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00009B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00009D 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   00009F 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000A0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000A1 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0000A3 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000A4 37                    XCHW      AX, HL             ;; 1 cycle
   \   0000A5 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000A7 07                    ADDW      AX, HL             ;; 1 cycle
   \   0000A8 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   0000AB BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0000AC 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000AD BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   0000AF 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000B0 8800                  MOV       A, [SP]            ;; 1 cycle
   \   0000B2 9A05                  MOV       [DE+0x05], A       ;; 1 cycle
   \   0000B4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000B6 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B7 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000B9 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0000BB 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000BC 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000BD 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0000BF 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000C0 37                    XCHW      AX, HL             ;; 1 cycle
   \   0000C1 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000C3 07                    ADDW      AX, HL             ;; 1 cycle
   \   0000C4 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   0000C7 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0000C8 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000C9 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   0000CB 33                    XCHW      AX, BC             ;; 1 cycle
   \   0000CC 8800                  MOV       A, [SP]            ;; 1 cycle
   \   0000CE 9A06                  MOV       [DE+0x06], A       ;; 1 cycle
   \   0000D0 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000D2 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000D3 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000D5 70                    MOV       X, A               ;; 1 cycle
   \   0000D6 62                    MOV       A, C               ;; 1 cycle
   \   0000D7 60                    MOV       A, X               ;; 1 cycle
   \   0000D8 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
    405                p_device_version->setup_id         |= (uint32_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_ID_LSB1) << 8;
   \   0000DA A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000DC 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000DD 8C09                  MOV       A, [HL+0x09]       ;; 1 cycle
   \   0000DF 70                    MOV       X, A               ;; 1 cycle
   \   0000E0 F1                    CLRB      A                  ;; 1 cycle
   \   0000E1 F7                    CLRW      BC                 ;; 1 cycle
   \   0000E2 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   0000E4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000E5 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0000E7 03                    ADDW      AX, BC             ;; 1 cycle
   \   0000E8 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000E9 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000EA 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000EC C3                    PUSH      BC                 ;; 1 cycle
   \   0000ED C1                    PUSH      AX                 ;; 1 cycle
   \   0000EE 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   0000F0 70                    MOV       X, A               ;; 1 cycle
   \   0000F1 F1                    CLRB      A                  ;; 1 cycle
   \   0000F2 F7                    CLRW      BC                 ;; 1 cycle
   \   0000F3 C3                    PUSH      BC                 ;; 1 cycle
   \   0000F4 C1                    PUSH      AX                 ;; 1 cycle
   \   0000F5 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   0000F7 70                    MOV       X, A               ;; 1 cycle
   \   0000F8 F1                    CLRB      A                  ;; 1 cycle
   \   0000F9 F7                    CLRW      BC                 ;; 1 cycle
   \   0000FA C3                    PUSH      BC                 ;; 1 cycle
   \   0000FB C1                    PUSH      AX                 ;; 1 cycle
   \   0000FC 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   0000FE 70                    MOV       X, A               ;; 1 cycle
   \   0000FF F1                    CLRB      A                  ;; 1 cycle
   \   000100 F7                    CLRW      BC                 ;; 1 cycle
   \   000101 C3                    PUSH      BC                 ;; 1 cycle
   \   000102 C1                    PUSH      AX                 ;; 1 cycle
   \   000103 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   000105 70                    MOV       X, A               ;; 1 cycle
   \   000106 F1                    CLRB      A                  ;; 1 cycle
   \   000107 F7                    CLRW      BC                 ;; 1 cycle
   \   000108 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   00010A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00010B 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   00010D 03                    ADDW      AX, BC             ;; 1 cycle
   \   00010E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00010F 17                    MOVW      AX, HL             ;; 1 cycle
   \   000110 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000112 FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000115 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000117 16                    MOVW      HL, AX             ;; 1 cycle
   \   000118 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   00011A 03                    ADDW      AX, BC             ;; 1 cycle
   \   00011B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00011C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00011D 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00011F FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000122 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000124 16                    MOVW      HL, AX             ;; 1 cycle
   \   000125 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000127 03                    ADDW      AX, BC             ;; 1 cycle
   \   000128 12                    MOVW      BC, AX             ;; 1 cycle
   \   000129 17                    MOVW      AX, HL             ;; 1 cycle
   \   00012A 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00012C FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   00012F FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000132 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   000135 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000136 33                    XCHW      AX, BC             ;; 1 cycle
   \   000137 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000139 33                    XCHW      AX, BC             ;; 1 cycle
   \   00013A 8800                  MOV       A, [SP]            ;; 1 cycle
   \   00013C 9A04                  MOV       [DE+0x04], A       ;; 1 cycle
   \   00013E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000140 12                    MOVW      BC, AX             ;; 1 cycle
   \   000141 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000143 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000145 33                    XCHW      AX, BC             ;; 1 cycle
   \   000146 16                    MOVW      HL, AX             ;; 1 cycle
   \   000147 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000149 33                    XCHW      AX, BC             ;; 1 cycle
   \   00014A 37                    XCHW      AX, HL             ;; 1 cycle
   \   00014B 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00014D 07                    ADDW      AX, HL             ;; 1 cycle
   \   00014E FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   000151 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000152 33                    XCHW      AX, BC             ;; 1 cycle
   \   000153 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000155 33                    XCHW      AX, BC             ;; 1 cycle
   \   000156 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000158 9A05                  MOV       [DE+0x05], A       ;; 1 cycle
   \   00015A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00015C 12                    MOVW      BC, AX             ;; 1 cycle
   \   00015D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00015F 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000161 33                    XCHW      AX, BC             ;; 1 cycle
   \   000162 16                    MOVW      HL, AX             ;; 1 cycle
   \   000163 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000165 33                    XCHW      AX, BC             ;; 1 cycle
   \   000166 37                    XCHW      AX, HL             ;; 1 cycle
   \   000167 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000169 07                    ADDW      AX, HL             ;; 1 cycle
   \   00016A FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00016D BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00016E 33                    XCHW      AX, BC             ;; 1 cycle
   \   00016F BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000171 33                    XCHW      AX, BC             ;; 1 cycle
   \   000172 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000174 9A06                  MOV       [DE+0x06], A       ;; 1 cycle
   \   000176 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000178 12                    MOVW      BC, AX             ;; 1 cycle
   \   000179 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00017B 70                    MOV       X, A               ;; 1 cycle
   \   00017C 62                    MOV       A, C               ;; 1 cycle
   \   00017D 60                    MOV       A, X               ;; 1 cycle
   \   00017E 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
    406                p_device_version->setup_id         |= (uint32_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_ID_MSB0) << 16;
   \   000180 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000182 16                    MOVW      HL, AX             ;; 1 cycle
   \   000183 8C0A                  MOV       A, [HL+0x0A]       ;; 1 cycle
   \   000185 70                    MOV       X, A               ;; 1 cycle
   \   000186 F1                    CLRB      A                  ;; 1 cycle
   \   000187 F7                    CLRW      BC                 ;; 1 cycle
   \   000188 12                    MOVW      BC, AX             ;; 1 cycle
   \   000189 F6                    CLRW      AX                 ;; 1 cycle
   \   00018A C3                    PUSH      BC                 ;; 1 cycle
   \   00018B C1                    PUSH      AX                 ;; 1 cycle
   \   00018C 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00018E 70                    MOV       X, A               ;; 1 cycle
   \   00018F F1                    CLRB      A                  ;; 1 cycle
   \   000190 F7                    CLRW      BC                 ;; 1 cycle
   \   000191 C3                    PUSH      BC                 ;; 1 cycle
   \   000192 C1                    PUSH      AX                 ;; 1 cycle
   \   000193 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000195 70                    MOV       X, A               ;; 1 cycle
   \   000196 F1                    CLRB      A                  ;; 1 cycle
   \   000197 F7                    CLRW      BC                 ;; 1 cycle
   \   000198 C3                    PUSH      BC                 ;; 1 cycle
   \   000199 C1                    PUSH      AX                 ;; 1 cycle
   \   00019A 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   00019C 70                    MOV       X, A               ;; 1 cycle
   \   00019D F1                    CLRB      A                  ;; 1 cycle
   \   00019E F7                    CLRW      BC                 ;; 1 cycle
   \   00019F C3                    PUSH      BC                 ;; 1 cycle
   \   0001A0 C1                    PUSH      AX                 ;; 1 cycle
   \   0001A1 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   0001A3 70                    MOV       X, A               ;; 1 cycle
   \   0001A4 F1                    CLRB      A                  ;; 1 cycle
   \   0001A5 F7                    CLRW      BC                 ;; 1 cycle
   \   0001A6 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   0001A8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001A9 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001AB 03                    ADDW      AX, BC             ;; 1 cycle
   \   0001AC 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001AD 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001AE 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0001B0 FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   0001B3 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   0001B5 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001B6 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001B8 03                    ADDW      AX, BC             ;; 1 cycle
   \   0001B9 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001BA 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001BB 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0001BD FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   0001C0 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   0001C2 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001C3 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001C5 03                    ADDW      AX, BC             ;; 1 cycle
   \   0001C6 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001C7 17                    MOVW      AX, HL             ;; 1 cycle
   \   0001C8 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0001CA FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   0001CD FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   0001D0 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   0001D3 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0001D4 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001D5 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   0001D7 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001D8 8800                  MOV       A, [SP]            ;; 1 cycle
   \   0001DA 9A04                  MOV       [DE+0x04], A       ;; 1 cycle
   \   0001DC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001DE 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001DF A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001E1 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001E3 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001E4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0001E5 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001E7 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001E8 37                    XCHW      AX, HL             ;; 1 cycle
   \   0001E9 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0001EB 07                    ADDW      AX, HL             ;; 1 cycle
   \   0001EC FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   0001EF BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0001F0 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001F1 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   0001F3 33                    XCHW      AX, BC             ;; 1 cycle
   \   0001F4 8800                  MOV       A, [SP]            ;; 1 cycle
   \   0001F6 9A05                  MOV       [DE+0x05], A       ;; 1 cycle
   \   0001F8 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0001FA 12                    MOVW      BC, AX             ;; 1 cycle
   \   0001FB A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0001FD 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0001FF 33                    XCHW      AX, BC             ;; 1 cycle
   \   000200 16                    MOVW      HL, AX             ;; 1 cycle
   \   000201 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000203 33                    XCHW      AX, BC             ;; 1 cycle
   \   000204 37                    XCHW      AX, HL             ;; 1 cycle
   \   000205 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000207 07                    ADDW      AX, HL             ;; 1 cycle
   \   000208 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00020B BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00020C 33                    XCHW      AX, BC             ;; 1 cycle
   \   00020D BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   00020F 33                    XCHW      AX, BC             ;; 1 cycle
   \   000210 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000212 9A06                  MOV       [DE+0x06], A       ;; 1 cycle
   \   000214 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000216 12                    MOVW      BC, AX             ;; 1 cycle
   \   000217 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000219 70                    MOV       X, A               ;; 1 cycle
   \   00021A 62                    MOV       A, C               ;; 1 cycle
   \   00021B 60                    MOV       A, X               ;; 1 cycle
   \   00021C 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
    407                p_device_version->setup_id         |= (uint32_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_ID_MSB1) << 24;
   \   00021E A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000220 16                    MOVW      HL, AX             ;; 1 cycle
   \   000221 8C0B                  MOV       A, [HL+0x0B]       ;; 1 cycle
   \   000223 70                    MOV       X, A               ;; 1 cycle
   \   000224 F1                    CLRB      A                  ;; 1 cycle
   \   000225 F7                    CLRW      BC                 ;; 1 cycle
   \   000226 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000228 12                    MOVW      BC, AX             ;; 1 cycle
   \   000229 F6                    CLRW      AX                 ;; 1 cycle
   \   00022A C3                    PUSH      BC                 ;; 1 cycle
   \   00022B C1                    PUSH      AX                 ;; 1 cycle
   \   00022C 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00022E 70                    MOV       X, A               ;; 1 cycle
   \   00022F F1                    CLRB      A                  ;; 1 cycle
   \   000230 F7                    CLRW      BC                 ;; 1 cycle
   \   000231 C3                    PUSH      BC                 ;; 1 cycle
   \   000232 C1                    PUSH      AX                 ;; 1 cycle
   \   000233 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000235 70                    MOV       X, A               ;; 1 cycle
   \   000236 F1                    CLRB      A                  ;; 1 cycle
   \   000237 F7                    CLRW      BC                 ;; 1 cycle
   \   000238 C3                    PUSH      BC                 ;; 1 cycle
   \   000239 C1                    PUSH      AX                 ;; 1 cycle
   \   00023A 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   00023C 70                    MOV       X, A               ;; 1 cycle
   \   00023D F1                    CLRB      A                  ;; 1 cycle
   \   00023E F7                    CLRW      BC                 ;; 1 cycle
   \   00023F C3                    PUSH      BC                 ;; 1 cycle
   \   000240 C1                    PUSH      AX                 ;; 1 cycle
   \   000241 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   000243 70                    MOV       X, A               ;; 1 cycle
   \   000244 F1                    CLRB      A                  ;; 1 cycle
   \   000245 F7                    CLRW      BC                 ;; 1 cycle
   \   000246 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000248 16                    MOVW      HL, AX             ;; 1 cycle
   \   000249 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   00024B 03                    ADDW      AX, BC             ;; 1 cycle
   \   00024C 12                    MOVW      BC, AX             ;; 1 cycle
   \   00024D 17                    MOVW      AX, HL             ;; 1 cycle
   \   00024E 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000250 FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000253 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000255 16                    MOVW      HL, AX             ;; 1 cycle
   \   000256 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000258 03                    ADDW      AX, BC             ;; 1 cycle
   \   000259 12                    MOVW      BC, AX             ;; 1 cycle
   \   00025A 17                    MOVW      AX, HL             ;; 1 cycle
   \   00025B 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00025D FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000260 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000262 16                    MOVW      HL, AX             ;; 1 cycle
   \   000263 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000265 03                    ADDW      AX, BC             ;; 1 cycle
   \   000266 12                    MOVW      BC, AX             ;; 1 cycle
   \   000267 17                    MOVW      AX, HL             ;; 1 cycle
   \   000268 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00026A FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   00026D FD....                CALL      N:?L_IOR_L03       ;; 3 cycles
   \   000270 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   000273 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000274 33                    XCHW      AX, BC             ;; 1 cycle
   \   000275 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000277 33                    XCHW      AX, BC             ;; 1 cycle
   \   000278 8800                  MOV       A, [SP]            ;; 1 cycle
   \   00027A 9A04                  MOV       [DE+0x04], A       ;; 1 cycle
   \   00027C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00027E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00027F A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000281 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000283 33                    XCHW      AX, BC             ;; 1 cycle
   \   000284 16                    MOVW      HL, AX             ;; 1 cycle
   \   000285 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   000287 33                    XCHW      AX, BC             ;; 1 cycle
   \   000288 37                    XCHW      AX, HL             ;; 1 cycle
   \   000289 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00028B 07                    ADDW      AX, HL             ;; 1 cycle
   \   00028C FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   00028F BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000290 33                    XCHW      AX, BC             ;; 1 cycle
   \   000291 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000293 33                    XCHW      AX, BC             ;; 1 cycle
   \   000294 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000296 9A05                  MOV       [DE+0x05], A       ;; 1 cycle
   \   000298 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00029A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00029B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00029D 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   00029F 33                    XCHW      AX, BC             ;; 1 cycle
   \   0002A0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002A1 318E                  SHRW      AX, 0x8            ;; 1 cycle
   \   0002A3 33                    XCHW      AX, BC             ;; 1 cycle
   \   0002A4 37                    XCHW      AX, HL             ;; 1 cycle
   \   0002A5 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0002A7 07                    ADDW      AX, HL             ;; 1 cycle
   \   0002A8 FBF8FF                MOVW      HL, SP             ;; 1 cycle
   \   0002AB BB                    MOVW      [HL], AX           ;; 1 cycle
   \   0002AC 33                    XCHW      AX, BC             ;; 1 cycle
   \   0002AD BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   0002AF 33                    XCHW      AX, BC             ;; 1 cycle
   \   0002B0 8800                  MOV       A, [SP]            ;; 1 cycle
   \   0002B2 9A06                  MOV       [DE+0x06], A       ;; 1 cycle
   \   0002B4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0002B6 12                    MOVW      BC, AX             ;; 1 cycle
   \   0002B7 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0002B9 70                    MOV       X, A               ;; 1 cycle
   \   0002BA 62                    MOV       A, C               ;; 1 cycle
   \   0002BB 60                    MOV       A, X               ;; 1 cycle
   \   0002BC 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
    408                p_device_version->setup_status      = *(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_VERSION + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_VERSION_T_SETUP_STATUS);
   \   0002BE A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002C0 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002C1 8C0C                  MOV       A, [HL+0x0C]       ;; 1 cycle
   \   0002C3 9A08                  MOV       [DE+0x08], A       ;; 1 cycle
    409                break;
   \   0002C5 ED....                BR        N:??acil_decode_evt_11  ;; 3 cycles
   \   0002C8                       ; ------------------------------------- Block: 466 cycles
    410          
    411              case ACI_CMD_GET_DEVICE_ADDRESS:
    412                p_device_address = &(p_evt_params_cmd_rsp->params.get_device_address);
   \                     ??acil_decode_evt_8:
   \   0002C8 A7                    INCW      HL                 ;; 1 cycle
   \   0002C9 A7                    INCW      HL                 ;; 1 cycle
   \   0002CA 37                    XCHW      AX, HL             ;; 1 cycle
   \   0002CB B800                  MOVW      [SP], AX           ;; 1 cycle
   \   0002CD 37                    XCHW      AX, HL             ;; 1 cycle
    413                memcpy((uint8_t *)(p_device_address->bd_addr_own), (buffer_in + OFFSET_ACI_EVT_T_CMD_RSP+OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_ADDRESS+OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_ADDRESS_T_BD_ADDR_OWN), BTLE_DEVICE_ADDRESS_SIZE);
   \   0002CE A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002D0 040400                ADDW      AX, #0x4           ;; 1 cycle
   \   0002D3 14                    MOVW      DE, AX             ;; 1 cycle
   \   0002D4 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0002D6 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002D7 5306                  MOV       B, #0x6            ;; 1 cycle
   \   0002D9 FD....                CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
    414                p_device_address->bd_addr_type = (aci_bd_addr_type_t) *(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP+OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_DEVICE_ADDRESS+OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_DEVICE_ADDRESS_T_BD_ADDR_TYPE);
   \   0002DC A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002DE 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002DF 8C0A                  MOV       A, [HL+0x0A]       ;; 1 cycle
   \   0002E1 73                    MOV       B, A               ;; 1 cycle
   \   0002E2 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0002E4 16                    MOVW      HL, AX             ;; 1 cycle
   \   0002E5 63                    MOV       A, B               ;; 1 cycle
   \   0002E6 9C06                  MOV       [HL+0x06], A       ;; 1 cycle
    415                break;
   \   0002E8 ED....                BR        N:??acil_decode_evt_11  ;; 3 cycles
   \   0002EB                       ; ------------------------------------- Block: 25 cycles
    416                
    417              case ACI_CMD_GET_TEMPERATURE:
    418                p_temperature = &(p_evt_params_cmd_rsp->params.get_temperature);
   \                     ??acil_decode_evt_10:
   \   0002EB A7                    INCW      HL                 ;; 1 cycle
   \   0002EC A7                    INCW      HL                 ;; 1 cycle
    419                p_temperature->temperature_value =  (int16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_TEMPERATURE + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_TEMPERATURE_T_TEMPERATURE_VALUE_LSB);
   \   0002ED A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002EF 14                    MOVW      DE, AX             ;; 1 cycle
   \   0002F0 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   0002F2 74                    MOV       E, A               ;; 1 cycle
   \   0002F3 5500                  MOV       D, #0x0            ;; 1 cycle
   \   0002F5 64                    MOV       A, E               ;; 1 cycle
   \   0002F6 9B                    MOV       [HL], A            ;; 1 cycle
   \   0002F7 15                    MOVW      AX, DE             ;; 1 cycle
   \   0002F8 F0                    CLRB      X                  ;; 1 cycle
   \   0002F9 70                    MOV       X, A               ;; 1 cycle
   \   0002FA 60                    MOV       A, X               ;; 1 cycle
   \   0002FB 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    420                p_temperature->temperature_value |= (int16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_TEMPERATURE + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_TEMPERATURE_T_TEMPERATURE_VALUE_MSB) << 8;
   \   0002FD A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0002FF 14                    MOVW      DE, AX             ;; 1 cycle
   \   000300 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000302 70                    MOV       X, A               ;; 1 cycle
   \   000303 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000305 12                    MOVW      BC, AX             ;; 1 cycle
   \   000306 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000307 74                    MOV       E, A               ;; 1 cycle
   \   000308 5500                  MOV       D, #0x0            ;; 1 cycle
   \   00030A 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   00030C 70                    MOV       X, A               ;; 1 cycle
   \   00030D 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00030F 616D                  OR        A, D               ;; 1 cycle
   \   000311 08                    XCH       A, X               ;; 1 cycle
   \   000312 616C                  OR        A, E               ;; 1 cycle
   \   000314 08                    XCH       A, X               ;; 1 cycle
   \   000315 616B                  OR        A, B               ;; 1 cycle
   \   000317 08                    XCH       A, X               ;; 1 cycle
   \   000318 616A                  OR        A, C               ;; 1 cycle
   \   00031A 08                    XCH       A, X               ;; 1 cycle
   \   00031B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00031C 64                    MOV       A, E               ;; 1 cycle
   \   00031D 9B                    MOV       [HL], A            ;; 1 cycle
   \   00031E 15                    MOVW      AX, DE             ;; 1 cycle
   \   00031F F0                    CLRB      X                  ;; 1 cycle
   \   000320 70                    MOV       X, A               ;; 1 cycle
   \   000321 60                    MOV       A, X               ;; 1 cycle
   \   000322 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    421                break;
   \   000324 EF6B                  BR        S:??acil_decode_evt_11  ;; 3 cycles
   \   000326                       ; ------------------------------------- Block: 45 cycles
    422                
    423              case ACI_CMD_GET_BATTERY_LEVEL:
    424                p_batt_lvl = &(p_evt_params_cmd_rsp->params.get_battery_level);
   \                     ??acil_decode_evt_9:
   \   000326 A7                    INCW      HL                 ;; 1 cycle
   \   000327 A7                    INCW      HL                 ;; 1 cycle
    425                p_batt_lvl->battery_level =  (int16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_BATTERY_LEVEL + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_BATTERY_LEVEL_T_BATTERY_LEVEL_LSB);
   \   000328 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00032A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00032B 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00032D 74                    MOV       E, A               ;; 1 cycle
   \   00032E 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000330 64                    MOV       A, E               ;; 1 cycle
   \   000331 9B                    MOV       [HL], A            ;; 1 cycle
   \   000332 15                    MOVW      AX, DE             ;; 1 cycle
   \   000333 F0                    CLRB      X                  ;; 1 cycle
   \   000334 70                    MOV       X, A               ;; 1 cycle
   \   000335 60                    MOV       A, X               ;; 1 cycle
   \   000336 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    426                p_batt_lvl->battery_level |= (int16_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_GET_BATTERY_LEVEL + OFFSET_ACI_EVT_CMD_RSP_PARAMS_GET_BATTERY_LEVEL_T_BATTERY_LEVEL_MSB) << 8;
   \   000338 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00033A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00033B 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   00033D 70                    MOV       X, A               ;; 1 cycle
   \   00033E 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000340 12                    MOVW      BC, AX             ;; 1 cycle
   \   000341 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000342 74                    MOV       E, A               ;; 1 cycle
   \   000343 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000345 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   000347 70                    MOV       X, A               ;; 1 cycle
   \   000348 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00034A 616D                  OR        A, D               ;; 1 cycle
   \   00034C 08                    XCH       A, X               ;; 1 cycle
   \   00034D 616C                  OR        A, E               ;; 1 cycle
   \   00034F 08                    XCH       A, X               ;; 1 cycle
   \   000350 616B                  OR        A, B               ;; 1 cycle
   \   000352 08                    XCH       A, X               ;; 1 cycle
   \   000353 616A                  OR        A, C               ;; 1 cycle
   \   000355 08                    XCH       A, X               ;; 1 cycle
   \   000356 14                    MOVW      DE, AX             ;; 1 cycle
   \   000357 64                    MOV       A, E               ;; 1 cycle
   \   000358 9B                    MOV       [HL], A            ;; 1 cycle
   \   000359 15                    MOVW      AX, DE             ;; 1 cycle
   \   00035A F0                    CLRB      X                  ;; 1 cycle
   \   00035B 70                    MOV       X, A               ;; 1 cycle
   \   00035C 60                    MOV       A, X               ;; 1 cycle
   \   00035D 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    427                break;
   \   00035F EF30                  BR        S:??acil_decode_evt_11  ;; 3 cycles
   \   000361                       ; ------------------------------------- Block: 45 cycles
    428              
    429              case ACI_CMD_READ_DYNAMIC_DATA:
    430                p_read_dyn_data = &(p_evt_params_cmd_rsp->params.read_dynamic_data);
   \                     ??acil_decode_evt_6:
   \   000361 A7                    INCW      HL                 ;; 1 cycle
   \   000362 A7                    INCW      HL                 ;; 1 cycle
    431                p_read_dyn_data->seq_no =  (uint8_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_READ_DYNAMIC_DATA + OFFSET_ACI_EVT_CMD_RSP_READ_DYNAMIC_DATA_T_SEQ_NO);
   \   000363 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000365 14                    MOVW      DE, AX             ;; 1 cycle
   \   000366 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   000368 9B                    MOV       [HL], A            ;; 1 cycle
    432                memcpy((uint8_t *)(p_read_dyn_data->dynamic_data), (buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_READ_DYNAMIC_DATA + OFFSET_ACI_CMD_PARAMS_WRITE_DYNAMIC_DATA_T_DYNAMIC_DATA), ACIL_DECODE_EVT_GET_LENGTH(buffer_in) - 3); // 3 bytes subtracted account for EventCode, CommandOpCode and Status bytes.
   \   000369 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00036B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00036C 89                    MOV       A, [DE]            ;; 1 cycle
   \   00036D 70                    MOV       X, A               ;; 1 cycle
   \   00036E F1                    CLRB      A                  ;; 1 cycle
   \   00036F 04FDFF                ADDW      AX, #0xFFFD        ;; 1 cycle
   \   000372 12                    MOVW      BC, AX             ;; 1 cycle
   \   000373 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000375 14                    MOVW      DE, AX             ;; 1 cycle
   \   000376 35                    XCHW      AX, DE             ;; 1 cycle
   \   000377 040500                ADDW      AX, #0x5           ;; 1 cycle
   \   00037A 35                    XCHW      AX, DE             ;; 1 cycle
   \   00037B A7                    INCW      HL                 ;; 1 cycle
   \   00037C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00037D FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    433                // Now that the p_read_dyn_data->dynamic_data will be pointing to memory location with enough space to accommodate upto 27 bytes of dynamic data received. This is because of the padding element in aci_evt_params_cmd_rsp_t
    434                break;
   \   000380 EF0F                  BR        S:??acil_decode_evt_11  ;; 3 cycles
   \   000382                       ; ------------------------------------- Block: 26 cycles
    435              
    436              case ACI_CMD_DTM_CMD:
    437                p_dtm_evt = &(p_evt_params_cmd_rsp->params.dtm_cmd);
   \                     ??acil_decode_evt_5:
   \   000382 A7                    INCW      HL                 ;; 1 cycle
   \   000383 A7                    INCW      HL                 ;; 1 cycle
    438                p_dtm_evt->evt_msb = (uint8_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_DTM_CMD + OFFSET_ACI_EVT_CMD_RSP_PARAMS_DTM_CMD_T_EVT_MSB);
   \   000384 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000386 14                    MOVW      DE, AX             ;; 1 cycle
   \   000387 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   000389 9B                    MOV       [HL], A            ;; 1 cycle
    439                p_dtm_evt->evt_lsb = (uint8_t)*(buffer_in + OFFSET_ACI_EVT_T_CMD_RSP + OFFSET_ACI_EVT_PARAMS_CMD_RSP_T_DTM_CMD + OFFSET_ACI_EVT_CMD_RSP_PARAMS_DTM_CMD_T_EVT_LSB);
   \   00038A A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00038C 14                    MOVW      DE, AX             ;; 1 cycle
   \   00038D 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   00038F 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    440                break;
   \   000391                       ; ------------------------------------- Block: 10 cycles
    441            }
    442          }
   \                     ??acil_decode_evt_11:
   \   000391 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   000393 C4                    POP       DE                 ;; 1 cycle
   \   000394 D7                    RET                          ;; 6 cycles
   \   000395                       ; ------------------------------------- Block: 8 cycles
   \   000395                       ; ------------------------------------- Total: 672 cycles
   \   000395                       REQUIRE ?CLRL78_V1_0_L00
    443          

   \                                 In  segment CODE, align 1, keep-with-next
    444          void acil_decode_evt_device_started(uint8_t *buffer_in, aci_evt_params_device_started_t *p_evt_params_device_started)
   \                     acil_decode_evt_device_started:
    445          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    446            p_evt_params_device_started->device_mode = (aci_device_operation_mode_t) *(buffer_in + OFFSET_ACI_EVT_T_DEVICE_STARTED+OFFSET_ACI_EVT_PARAMS_DEVICE_STARTED_T_DEVICE_MODE);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    447            p_evt_params_device_started->hw_error = (aci_hw_error_t) *(buffer_in + OFFSET_ACI_EVT_T_DEVICE_STARTED+OFFSET_ACI_EVT_PARAMS_DEVICE_STARTED_T_HW_ERROR);
   \   000007 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    448            p_evt_params_device_started->credit_available = *(buffer_in + OFFSET_ACI_EVT_T_DEVICE_STARTED+OFFSET_ACI_EVT_PARAMS_DEVICE_STARTED_T_CREDIT_AVAILABLE); 
   \   00000B 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00000D 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    449          }
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010 D7                    RET                          ;; 6 cycles
   \   000011                       ; ------------------------------------- Block: 17 cycles
   \   000011                       ; ------------------------------------- Total: 17 cycles
   \   000011                       REQUIRE ?CLRL78_V1_0_L00
    450          

   \                                 In  segment CODE, align 1, keep-with-next
    451          void acil_decode_evt_pipe_status(uint8_t *buffer_in, aci_evt_params_pipe_status_t *p_aci_evt_params_pipe_status)
   \                     acil_decode_evt_pipe_status:
    452          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
    453            memcpy((uint8_t *)p_aci_evt_params_pipe_status->pipes_open_bitmap, (buffer_in + OFFSET_ACI_EVT_T_PIPE_STATUS + OFFSET_ACI_EVT_PARAMS_PIPE_STATUS_T_PIPES_OPEN_BITMAP), 8);
   \   000003 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000005 040200                ADDW      AX, #0x2           ;; 1 cycle
   \   000008 14                    MOVW      DE, AX             ;; 1 cycle
   \   000009 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C 5308                  MOV       B, #0x8            ;; 1 cycle
   \   00000E FD....                CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
    454            memcpy((uint8_t *)p_aci_evt_params_pipe_status->pipes_closed_bitmap, (buffer_in + OFFSET_ACI_EVT_T_PIPE_STATUS + OFFSET_ACI_EVT_PARAMS_PIPE_STATUS_T_PIPES_CLOSED_BITMAP), 8);
   \   000011 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000013 14                    MOVW      DE, AX             ;; 1 cycle
   \   000014 35                    XCHW      AX, DE             ;; 1 cycle
   \   000015 040A00                ADDW      AX, #0xA           ;; 1 cycle
   \   000018 35                    XCHW      AX, DE             ;; 1 cycle
   \   000019 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001C 37                    XCHW      AX, HL             ;; 1 cycle
   \   00001D 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000020 37                    XCHW      AX, HL             ;; 1 cycle
   \   000021 5308                  MOV       B, #0x8            ;; 1 cycle
   \   000023 FD....                CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
    455          }
   \   000026 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000028 C4                    POP       DE                 ;; 1 cycle
   \   000029 D7                    RET                          ;; 6 cycles
   \   00002A                       ; ------------------------------------- Block: 34 cycles
   \   00002A                       ; ------------------------------------- Total: 34 cycles
   \   00002A                       REQUIRE ?CLRL78_V1_0_L00
    456          

   \                                 In  segment CODE, align 1, keep-with-next
    457          void acil_decode_evt_disconnected(uint8_t *buffer_in, aci_evt_params_disconnected_t *p_aci_evt_params_disconnected)
   \                     acil_decode_evt_disconnected:
    458          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    459            p_aci_evt_params_disconnected->aci_status = (aci_status_code_t)*(buffer_in + OFFSET_ACI_EVT_T_DISCONNECTED + OFFSET_ACI_EVT_PARAMS_DISCONNECTED_T_ACI_STATUS);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    460            p_aci_evt_params_disconnected->btle_status = *(buffer_in + OFFSET_ACI_EVT_T_DISCONNECTED + OFFSET_ACI_EVT_PARAMS_DISCONNECTED_T_BTLE_STATUS);
   \   000007 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    461          }
   \   00000B C4                    POP       DE                 ;; 1 cycle
   \   00000C D7                    RET                          ;; 6 cycles
   \   00000D                       ; ------------------------------------- Block: 15 cycles
   \   00000D                       ; ------------------------------------- Total: 15 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    462          

   \                                 In  segment CODE, align 1, keep-with-next
    463          void acil_decode_evt_bond_status(uint8_t *buffer_in, aci_evt_params_bond_status_t *p_aci_evt_params_bond_status)
   \                     acil_decode_evt_bond_status:
    464          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    465            p_aci_evt_params_bond_status->status_code = (aci_bond_status_code_t)*(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_STATUS_CODE);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    466            p_aci_evt_params_bond_status->status_source = (aci_bond_status_source_t)*(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_STATUS_SOURCE);
   \   000007 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    467            p_aci_evt_params_bond_status->secmode1_bitmap = *(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_SECMODE1_BITMAP);
   \   00000B 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00000D 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    468            p_aci_evt_params_bond_status->secmode2_bitmap = *(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_SECMODE2_BITMAP);
   \   00000F 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000011 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    469            p_aci_evt_params_bond_status->keys_exchanged_slave = *(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_KEYS_EXCHANGED_SLAVE);
   \   000013 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   000015 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
    470            p_aci_evt_params_bond_status->keys_exchanged_master = *(buffer_in + OFFSET_ACI_EVT_T_BOND_STATUS + OFFSET_ACI_EVT_PARAMS_BOND_STATUS_T_KEYS_EXCHANGED_MASTER);
   \   000017 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   000019 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
    471          }
   \   00001B C4                    POP       DE                 ;; 1 cycle
   \   00001C D7                    RET                          ;; 6 cycles
   \   00001D                       ; ------------------------------------- Block: 23 cycles
   \   00001D                       ; ------------------------------------- Total: 23 cycles
   \   00001D                       REQUIRE ?CLRL78_V1_0_L00
    472          

   \                                 In  segment CODE, align 1, keep-with-next
    473          uint8_t acil_decode_evt_data_received(uint8_t *buffer_in, aci_evt_params_data_received_t *p_evt_params_data_received)
   \                     acil_decode_evt_data_received:
    474          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002                       ; Auto size: 4
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
    475            uint8_t size = *( buffer_in + OFFSET_ACI_EVT_T_LEN) - (OFFSET_ACI_EVT_T_DATA_RECEIVED + OFFSET_ACI_RX_DATA_T_ACI_DATA) + 1 ;
   \   000004 89                    MOV       A, [DE]            ;; 1 cycle
   \   000005 0CFE                  ADD       A, #0xFE           ;; 1 cycle
   \   000007 9800                  MOV       [SP], A            ;; 1 cycle
    476            p_evt_params_data_received->rx_data.pipe_number = *(buffer_in + OFFSET_ACI_EVT_T_DATA_RECEIVED + OFFSET_ACI_RX_DATA_T_PIPE_NUMBER);
   \   000009 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   00000B 73                    MOV       B, A               ;; 1 cycle
   \   00000C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000F 63                    MOV       A, B               ;; 1 cycle
   \   000010 9B                    MOV       [HL], A            ;; 1 cycle
    477            memcpy((uint8_t *)p_evt_params_data_received->rx_data.aci_data, (buffer_in + OFFSET_ACI_EVT_T_DATA_RECEIVED + OFFSET_ACI_RX_DATA_T_ACI_DATA), size);
   \   000011 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000013 72                    MOV       C, A               ;; 1 cycle
   \   000014 F3                    CLRB      B                  ;; 1 cycle
   \   000015 A5                    INCW      DE                 ;; 1 cycle
   \   000016 A5                    INCW      DE                 ;; 1 cycle
   \   000017 A5                    INCW      DE                 ;; 1 cycle
   \   000018 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001A A1                    INCW      AX                 ;; 1 cycle
   \   00001B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00001D FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    478            return size;
   \   000020 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000022 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000024 C4                    POP       DE                 ;; 1 cycle
   \   000025 D7                    RET                          ;; 6 cycles
   \   000026                       ; ------------------------------------- Block: 35 cycles
   \   000026                       ; ------------------------------------- Total: 35 cycles
   \   000026                       REQUIRE ?CLRL78_V1_0_L00
    479          }
    480          

   \                                 In  segment CODE, align 1, keep-with-next
    481          void acil_decode_evt_data_ack(uint8_t *buffer_in, aci_evt_params_data_ack_t *p_evt_params_data_ack)
   \                     acil_decode_evt_data_ack:
    482          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    483            p_evt_params_data_ack->pipe_number = *(buffer_in + OFFSET_ACI_EVT_T_DATA_ACK + OFFSET_ACI_EVT_PARAMS_DATA_ACK_T_PIPE_NUMBER);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    484          }
   \   000007 C4                    POP       DE                 ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 13 cycles
   \   000009                       ; ------------------------------------- Total: 13 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    485          

   \                                 In  segment CODE, align 1, keep-with-next
    486          uint8_t acil_decode_evt_hw_error(uint8_t *buffer_in, aci_evt_params_hw_error_t *p_aci_evt_params_hw_error)
   \                     acil_decode_evt_hw_error:
    487          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002                       ; Auto size: 4
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
   \   000003 C3                    PUSH      BC                 ;; 1 cycle
   \   000004 C6                    POP       HL                 ;; 1 cycle
    488            uint8_t size = *(buffer_in + OFFSET_ACI_EVT_T_LEN) - (OFFSET_ACI_EVT_T_HW_ERROR + OFFSET_ACI_EVT_PARAMS_HW_ERROR_T_FILE_NAME) + 1;
   \   000005 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 89                    MOV       A, [DE]            ;; 1 cycle
   \   000009 0CFD                  ADD       A, #0xFD           ;; 1 cycle
   \   00000B 9800                  MOV       [SP], A            ;; 1 cycle
    489            p_aci_evt_params_hw_error->line_num = (uint16_t)(*(buffer_in + OFFSET_ACI_EVT_T_HW_ERROR + OFFSET_ACI_EVT_PARAMS_HW_ERROR_T_LINE_NUM_MSB)) << 8;
   \   00000D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00000F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000010 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000012 70                    MOV       X, A               ;; 1 cycle
   \   000013 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000015 14                    MOVW      DE, AX             ;; 1 cycle
   \   000016 64                    MOV       A, E               ;; 1 cycle
   \   000017 9B                    MOV       [HL], A            ;; 1 cycle
   \   000018 15                    MOVW      AX, DE             ;; 1 cycle
   \   000019 F0                    CLRB      X                  ;; 1 cycle
   \   00001A 70                    MOV       X, A               ;; 1 cycle
   \   00001B 60                    MOV       A, X               ;; 1 cycle
   \   00001C 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    490            p_aci_evt_params_hw_error->line_num |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_HW_ERROR + OFFSET_ACI_EVT_PARAMS_HW_ERROR_T_LINE_NUM_LSB);
   \   00001E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000020 14                    MOVW      DE, AX             ;; 1 cycle
   \   000021 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000023 72                    MOV       C, A               ;; 1 cycle
   \   000024 F3                    CLRB      B                  ;; 1 cycle
   \   000025 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000026 74                    MOV       E, A               ;; 1 cycle
   \   000027 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000029 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   00002B 70                    MOV       X, A               ;; 1 cycle
   \   00002C 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00002E 616D                  OR        A, D               ;; 1 cycle
   \   000030 08                    XCH       A, X               ;; 1 cycle
   \   000031 616C                  OR        A, E               ;; 1 cycle
   \   000033 08                    XCH       A, X               ;; 1 cycle
   \   000034 616B                  OR        A, B               ;; 1 cycle
   \   000036 08                    XCH       A, X               ;; 1 cycle
   \   000037 616A                  OR        A, C               ;; 1 cycle
   \   000039 08                    XCH       A, X               ;; 1 cycle
   \   00003A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00003B 64                    MOV       A, E               ;; 1 cycle
   \   00003C 9B                    MOV       [HL], A            ;; 1 cycle
   \   00003D 15                    MOVW      AX, DE             ;; 1 cycle
   \   00003E F0                    CLRB      X                  ;; 1 cycle
   \   00003F 70                    MOV       X, A               ;; 1 cycle
   \   000040 60                    MOV       A, X               ;; 1 cycle
   \   000041 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    491            memcpy((uint8_t *)p_aci_evt_params_hw_error->file_name, (buffer_in + OFFSET_ACI_EVT_T_HW_ERROR + OFFSET_ACI_EVT_PARAMS_HW_ERROR_T_FILE_NAME), size);
   \   000043 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000045 72                    MOV       C, A               ;; 1 cycle
   \   000046 F3                    CLRB      B                  ;; 1 cycle
   \   000047 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000049 040400                ADDW      AX, #0x4           ;; 1 cycle
   \   00004C 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004D A7                    INCW      HL                 ;; 1 cycle
   \   00004E A7                    INCW      HL                 ;; 1 cycle
   \   00004F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000050 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    492            return size;
   \   000053 8800                  MOV       A, [SP]            ;; 1 cycle
   \   000055 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000057 C4                    POP       DE                 ;; 1 cycle
   \   000058 D7                    RET                          ;; 6 cycles
   \   000059                       ; ------------------------------------- Block: 71 cycles
   \   000059                       ; ------------------------------------- Total: 71 cycles
   \   000059                       REQUIRE ?CLRL78_V1_0_L00
    493          }
    494          

   \                                 In  segment CODE, align 1, keep-with-next
    495          void acil_decode_evt_credit(uint8_t *buffer_in, aci_evt_params_data_credit_t *p_evt_params_data_credit)
   \                     acil_decode_evt_credit:
    496          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    497            p_evt_params_data_credit->credit = *(buffer_in + OFFSET_ACI_EVT_T_DATA_CREDIT + OFFSET_ACI_EVT_PARAMS_DATA_CREDIT_T_CREDIT);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    498          }
   \   000007 C4                    POP       DE                 ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 13 cycles
   \   000009                       ; ------------------------------------- Total: 13 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    499          

   \                                 In  segment CODE, align 1, keep-with-next
    500          void acil_decode_evt_connected(uint8_t *buffer_in, aci_evt_params_connected_t *p_aci_evt_params_connected)
   \                     acil_decode_evt_connected:
    501          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
    502            p_aci_evt_params_connected->dev_addr_type = (aci_bd_addr_type_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_DEV_ADDR_TYPE);
   \   000003 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000005 16                    MOVW      HL, AX             ;; 1 cycle
   \   000006 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000008 73                    MOV       B, A               ;; 1 cycle
   \   000009 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000C 63                    MOV       A, B               ;; 1 cycle
   \   00000D 9B                    MOV       [HL], A            ;; 1 cycle
    503            memcpy(&(p_aci_evt_params_connected->dev_addr[0]), (buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_DEV_ADDR), BTLE_DEVICE_ADDRESS_SIZE);
   \   00000E A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000010 040300                ADDW      AX, #0x3           ;; 1 cycle
   \   000013 14                    MOVW      DE, AX             ;; 1 cycle
   \   000014 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000016 A1                    INCW      AX                 ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 5306                  MOV       B, #0x6            ;; 1 cycle
   \   00001A FD....                CALL      N:?MEMCPY_SMALL_NEAR  ;; 3 cycles
    504            p_aci_evt_params_connected->conn_rf_interval       = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_RF_INTERVAL_MSB) << 8;
   \   00001D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000020 8C0A                  MOV       A, [HL+0x0A]       ;; 1 cycle
   \   000022 70                    MOV       X, A               ;; 1 cycle
   \   000023 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000025 16                    MOVW      HL, AX             ;; 1 cycle
   \   000026 66                    MOV       A, L               ;; 1 cycle
   \   000027 73                    MOV       B, A               ;; 1 cycle
   \   000028 76                    MOV       L, A               ;; 1 cycle
   \   000029 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002B 14                    MOVW      DE, AX             ;; 1 cycle
   \   00002C 63                    MOV       A, B               ;; 1 cycle
   \   00002D 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
   \   00002F 17                    MOVW      AX, HL             ;; 1 cycle
   \   000030 F0                    CLRB      X                  ;; 1 cycle
   \   000031 73                    MOV       B, A               ;; 1 cycle
   \   000032 70                    MOV       X, A               ;; 1 cycle
   \   000033 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000035 16                    MOVW      HL, AX             ;; 1 cycle
   \   000036 63                    MOV       A, B               ;; 1 cycle
   \   000037 9C08                  MOV       [HL+0x08], A       ;; 1 cycle
    505            p_aci_evt_params_connected->conn_rf_interval      |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_RF_INTERVAL_LSB);
   \   000039 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003C 8C09                  MOV       A, [HL+0x09]       ;; 1 cycle
   \   00003E 72                    MOV       C, A               ;; 1 cycle
   \   00003F F3                    CLRB      B                  ;; 1 cycle
   \   000040 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000042 16                    MOVW      HL, AX             ;; 1 cycle
   \   000043 8C07                  MOV       A, [HL+0x07]       ;; 1 cycle
   \   000045 76                    MOV       L, A               ;; 1 cycle
   \   000046 5700                  MOV       H, #0x0            ;; 1 cycle
   \   000048 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00004A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004B 8A08                  MOV       A, [DE+0x08]       ;; 1 cycle
   \   00004D 70                    MOV       X, A               ;; 1 cycle
   \   00004E 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000050 616F                  OR        A, H               ;; 1 cycle
   \   000052 08                    XCH       A, X               ;; 1 cycle
   \   000053 616E                  OR        A, L               ;; 1 cycle
   \   000055 08                    XCH       A, X               ;; 1 cycle
   \   000056 616B                  OR        A, B               ;; 1 cycle
   \   000058 08                    XCH       A, X               ;; 1 cycle
   \   000059 616A                  OR        A, C               ;; 1 cycle
   \   00005B 08                    XCH       A, X               ;; 1 cycle
   \   00005C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00005D 66                    MOV       A, L               ;; 1 cycle
   \   00005E 73                    MOV       B, A               ;; 1 cycle
   \   00005F 76                    MOV       L, A               ;; 1 cycle
   \   000060 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000062 14                    MOVW      DE, AX             ;; 1 cycle
   \   000063 63                    MOV       A, B               ;; 1 cycle
   \   000064 9A07                  MOV       [DE+0x07], A       ;; 1 cycle
   \   000066 17                    MOVW      AX, HL             ;; 1 cycle
   \   000067 F0                    CLRB      X                  ;; 1 cycle
   \   000068 73                    MOV       B, A               ;; 1 cycle
   \   000069 70                    MOV       X, A               ;; 1 cycle
   \   00006A A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00006C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00006D 63                    MOV       A, B               ;; 1 cycle
   \   00006E 9C08                  MOV       [HL+0x08], A       ;; 1 cycle
    506            p_aci_evt_params_connected->conn_slave_rf_latency  = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_SLAVE_RF_LATENCY_MSB) << 8;
   \   000070 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000072 16                    MOVW      HL, AX             ;; 1 cycle
   \   000073 8C0C                  MOV       A, [HL+0x0C]       ;; 1 cycle
   \   000075 70                    MOV       X, A               ;; 1 cycle
   \   000076 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000078 16                    MOVW      HL, AX             ;; 1 cycle
   \   000079 66                    MOV       A, L               ;; 1 cycle
   \   00007A 73                    MOV       B, A               ;; 1 cycle
   \   00007B 76                    MOV       L, A               ;; 1 cycle
   \   00007C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00007E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00007F 63                    MOV       A, B               ;; 1 cycle
   \   000080 9A09                  MOV       [DE+0x09], A       ;; 1 cycle
   \   000082 17                    MOVW      AX, HL             ;; 1 cycle
   \   000083 F0                    CLRB      X                  ;; 1 cycle
   \   000084 73                    MOV       B, A               ;; 1 cycle
   \   000085 70                    MOV       X, A               ;; 1 cycle
   \   000086 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000088 16                    MOVW      HL, AX             ;; 1 cycle
   \   000089 63                    MOV       A, B               ;; 1 cycle
   \   00008A 9C0A                  MOV       [HL+0x0A], A       ;; 1 cycle
    507            p_aci_evt_params_connected->conn_slave_rf_latency |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_SLAVE_RF_LATENCY_LSB);
   \   00008C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00008E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00008F 8C0B                  MOV       A, [HL+0x0B]       ;; 1 cycle
   \   000091 72                    MOV       C, A               ;; 1 cycle
   \   000092 F3                    CLRB      B                  ;; 1 cycle
   \   000093 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000095 16                    MOVW      HL, AX             ;; 1 cycle
   \   000096 8C09                  MOV       A, [HL+0x09]       ;; 1 cycle
   \   000098 76                    MOV       L, A               ;; 1 cycle
   \   000099 5700                  MOV       H, #0x0            ;; 1 cycle
   \   00009B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00009D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00009E 8A0A                  MOV       A, [DE+0x0A]       ;; 1 cycle
   \   0000A0 70                    MOV       X, A               ;; 1 cycle
   \   0000A1 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000A3 616F                  OR        A, H               ;; 1 cycle
   \   0000A5 08                    XCH       A, X               ;; 1 cycle
   \   0000A6 616E                  OR        A, L               ;; 1 cycle
   \   0000A8 08                    XCH       A, X               ;; 1 cycle
   \   0000A9 616B                  OR        A, B               ;; 1 cycle
   \   0000AB 08                    XCH       A, X               ;; 1 cycle
   \   0000AC 616A                  OR        A, C               ;; 1 cycle
   \   0000AE 08                    XCH       A, X               ;; 1 cycle
   \   0000AF 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000B0 66                    MOV       A, L               ;; 1 cycle
   \   0000B1 73                    MOV       B, A               ;; 1 cycle
   \   0000B2 76                    MOV       L, A               ;; 1 cycle
   \   0000B3 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000B5 14                    MOVW      DE, AX             ;; 1 cycle
   \   0000B6 63                    MOV       A, B               ;; 1 cycle
   \   0000B7 9A09                  MOV       [DE+0x09], A       ;; 1 cycle
   \   0000B9 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000BA F0                    CLRB      X                  ;; 1 cycle
   \   0000BB 73                    MOV       B, A               ;; 1 cycle
   \   0000BC 70                    MOV       X, A               ;; 1 cycle
   \   0000BD A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000BF 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000C0 63                    MOV       A, B               ;; 1 cycle
   \   0000C1 9C0A                  MOV       [HL+0x0A], A       ;; 1 cycle
    508            p_aci_evt_params_connected->conn_rf_timeout        = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_RF_TIMEOUT_MSB) << 8;
   \   0000C3 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000C5 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000C6 8C0E                  MOV       A, [HL+0x0E]       ;; 1 cycle
   \   0000C8 70                    MOV       X, A               ;; 1 cycle
   \   0000C9 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000CB 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000CC 66                    MOV       A, L               ;; 1 cycle
   \   0000CD 73                    MOV       B, A               ;; 1 cycle
   \   0000CE 76                    MOV       L, A               ;; 1 cycle
   \   0000CF A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000D1 14                    MOVW      DE, AX             ;; 1 cycle
   \   0000D2 63                    MOV       A, B               ;; 1 cycle
   \   0000D3 9A0B                  MOV       [DE+0x0B], A       ;; 1 cycle
   \   0000D5 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000D6 F0                    CLRB      X                  ;; 1 cycle
   \   0000D7 73                    MOV       B, A               ;; 1 cycle
   \   0000D8 70                    MOV       X, A               ;; 1 cycle
   \   0000D9 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000DB 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000DC 63                    MOV       A, B               ;; 1 cycle
   \   0000DD 9C0C                  MOV       [HL+0x0C], A       ;; 1 cycle
    509            p_aci_evt_params_connected->conn_rf_timeout       |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_CONN_RF_TIMEOUT_LSB);
   \   0000DF A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000E1 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000E2 8C0D                  MOV       A, [HL+0x0D]       ;; 1 cycle
   \   0000E4 72                    MOV       C, A               ;; 1 cycle
   \   0000E5 F3                    CLRB      B                  ;; 1 cycle
   \   0000E6 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000E8 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000E9 8C0B                  MOV       A, [HL+0x0B]       ;; 1 cycle
   \   0000EB 76                    MOV       L, A               ;; 1 cycle
   \   0000EC 5700                  MOV       H, #0x0            ;; 1 cycle
   \   0000EE A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000F0 14                    MOVW      DE, AX             ;; 1 cycle
   \   0000F1 8A0C                  MOV       A, [DE+0x0C]       ;; 1 cycle
   \   0000F3 70                    MOV       X, A               ;; 1 cycle
   \   0000F4 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   0000F6 616F                  OR        A, H               ;; 1 cycle
   \   0000F8 08                    XCH       A, X               ;; 1 cycle
   \   0000F9 616E                  OR        A, L               ;; 1 cycle
   \   0000FB 08                    XCH       A, X               ;; 1 cycle
   \   0000FC 616B                  OR        A, B               ;; 1 cycle
   \   0000FE 08                    XCH       A, X               ;; 1 cycle
   \   0000FF 616A                  OR        A, C               ;; 1 cycle
   \   000101 08                    XCH       A, X               ;; 1 cycle
   \   000102 16                    MOVW      HL, AX             ;; 1 cycle
   \   000103 66                    MOV       A, L               ;; 1 cycle
   \   000104 73                    MOV       B, A               ;; 1 cycle
   \   000105 76                    MOV       L, A               ;; 1 cycle
   \   000106 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000108 14                    MOVW      DE, AX             ;; 1 cycle
   \   000109 63                    MOV       A, B               ;; 1 cycle
   \   00010A 9A0B                  MOV       [DE+0x0B], A       ;; 1 cycle
   \   00010C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00010D F0                    CLRB      X                  ;; 1 cycle
   \   00010E 73                    MOV       B, A               ;; 1 cycle
   \   00010F 70                    MOV       X, A               ;; 1 cycle
   \   000110 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000112 16                    MOVW      HL, AX             ;; 1 cycle
   \   000113 63                    MOV       A, B               ;; 1 cycle
   \   000114 9C0C                  MOV       [HL+0x0C], A       ;; 1 cycle
    510            p_aci_evt_params_connected->master_clock_accuracy  = (aci_clock_accuracy_t)*(buffer_in + OFFSET_ACI_EVT_T_CONNECTED + OFFSET_ACI_EVT_PARAMS_CONNECTED_T_MASTER_CLOCK_ACCURACY);
   \   000116 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000118 16                    MOVW      HL, AX             ;; 1 cycle
   \   000119 8C0F                  MOV       A, [HL+0x0F]       ;; 1 cycle
   \   00011B 73                    MOV       B, A               ;; 1 cycle
   \   00011C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00011E 16                    MOVW      HL, AX             ;; 1 cycle
   \   00011F 63                    MOV       A, B               ;; 1 cycle
   \   000120 9C0D                  MOV       [HL+0x0D], A       ;; 1 cycle
    511          
    512          }
   \   000122 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000124 C4                    POP       DE                 ;; 1 cycle
   \   000125 D7                    RET                          ;; 6 cycles
   \   000126                       ; ------------------------------------- Block: 217 cycles
   \   000126                       ; ------------------------------------- Total: 217 cycles
   \   000126                       REQUIRE ?CLRL78_V1_0_L00
    513          

   \                                 In  segment CODE, align 1, keep-with-next
    514          void acil_decode_evt_timing(uint8_t *buffer_in, aci_evt_params_timing_t *p_evt_params_timing)
   \                     acil_decode_evt_timing:
    515          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    516            p_evt_params_timing->conn_rf_interval       = *(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_RF_INTERVAL_MSB) << 8;
   \   000004 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000006 72                    MOV       C, A               ;; 1 cycle
   \   000007 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000009 62                    MOV       A, C               ;; 1 cycle
   \   00000A 9B                    MOV       [HL], A            ;; 1 cycle
   \   00000B 13                    MOVW      AX, BC             ;; 1 cycle
   \   00000C F0                    CLRB      X                  ;; 1 cycle
   \   00000D 70                    MOV       X, A               ;; 1 cycle
   \   00000E 60                    MOV       A, X               ;; 1 cycle
   \   00000F 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    517            p_evt_params_timing->conn_rf_interval      |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_RF_INTERVAL_LSB);
   \   000011 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000013 70                    MOV       X, A               ;; 1 cycle
   \   000014 F1                    CLRB      A                  ;; 1 cycle
   \   000015 C1                    PUSH      AX                 ;; 1 cycle
   \   000016 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000017 72                    MOV       C, A               ;; 1 cycle
   \   000018 F3                    CLRB      B                  ;; 1 cycle
   \   000019 8C01                  MOV       A, [HL+0x01]       ;; 1 cycle
   \   00001B 70                    MOV       X, A               ;; 1 cycle
   \   00001C 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   00001E 616B                  OR        A, B               ;; 1 cycle
   \   000020 08                    XCH       A, X               ;; 1 cycle
   \   000021 616A                  OR        A, C               ;; 1 cycle
   \   000023 08                    XCH       A, X               ;; 1 cycle
   \   000024 C2                    POP       BC                 ;; 1 cycle
   \   000025 616B                  OR        A, B               ;; 1 cycle
   \   000027 08                    XCH       A, X               ;; 1 cycle
   \   000028 616A                  OR        A, C               ;; 1 cycle
   \   00002A 08                    XCH       A, X               ;; 1 cycle
   \   00002B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00002C 62                    MOV       A, C               ;; 1 cycle
   \   00002D 9B                    MOV       [HL], A            ;; 1 cycle
   \   00002E 13                    MOVW      AX, BC             ;; 1 cycle
   \   00002F F0                    CLRB      X                  ;; 1 cycle
   \   000030 70                    MOV       X, A               ;; 1 cycle
   \   000031 60                    MOV       A, X               ;; 1 cycle
   \   000032 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    518            p_evt_params_timing->conn_slave_rf_latency  = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_SLAVE_RF_LATENCY_MSB) << 8;
   \   000034 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000036 72                    MOV       C, A               ;; 1 cycle
   \   000037 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   000039 62                    MOV       A, C               ;; 1 cycle
   \   00003A 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
   \   00003C 13                    MOVW      AX, BC             ;; 1 cycle
   \   00003D F0                    CLRB      X                  ;; 1 cycle
   \   00003E 70                    MOV       X, A               ;; 1 cycle
   \   00003F 60                    MOV       A, X               ;; 1 cycle
   \   000040 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    519            p_evt_params_timing->conn_slave_rf_latency |= (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_SLAVE_RF_LATENCY_LSB);
   \   000042 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   000044 70                    MOV       X, A               ;; 1 cycle
   \   000045 F1                    CLRB      A                  ;; 1 cycle
   \   000046 C1                    PUSH      AX                 ;; 1 cycle
   \   000047 8C02                  MOV       A, [HL+0x02]       ;; 1 cycle
   \   000049 72                    MOV       C, A               ;; 1 cycle
   \   00004A F3                    CLRB      B                  ;; 1 cycle
   \   00004B 8C03                  MOV       A, [HL+0x03]       ;; 1 cycle
   \   00004D 70                    MOV       X, A               ;; 1 cycle
   \   00004E 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000050 616B                  OR        A, B               ;; 1 cycle
   \   000052 08                    XCH       A, X               ;; 1 cycle
   \   000053 616A                  OR        A, C               ;; 1 cycle
   \   000055 08                    XCH       A, X               ;; 1 cycle
   \   000056 C2                    POP       BC                 ;; 1 cycle
   \   000057 616B                  OR        A, B               ;; 1 cycle
   \   000059 08                    XCH       A, X               ;; 1 cycle
   \   00005A 616A                  OR        A, C               ;; 1 cycle
   \   00005C 08                    XCH       A, X               ;; 1 cycle
   \   00005D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00005E 62                    MOV       A, C               ;; 1 cycle
   \   00005F 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
   \   000061 13                    MOVW      AX, BC             ;; 1 cycle
   \   000062 F0                    CLRB      X                  ;; 1 cycle
   \   000063 70                    MOV       X, A               ;; 1 cycle
   \   000064 60                    MOV       A, X               ;; 1 cycle
   \   000065 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    520            p_evt_params_timing->conn_rf_timeout        = (uint16_t)*(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_RF_TIMEOUT_MSB) << 8;
   \   000067 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   000069 72                    MOV       C, A               ;; 1 cycle
   \   00006A 318C                  SHLW      BC, 0x8            ;; 1 cycle
   \   00006C 62                    MOV       A, C               ;; 1 cycle
   \   00006D 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
   \   00006F 13                    MOVW      AX, BC             ;; 1 cycle
   \   000070 F0                    CLRB      X                  ;; 1 cycle
   \   000071 70                    MOV       X, A               ;; 1 cycle
   \   000072 60                    MOV       A, X               ;; 1 cycle
   \   000073 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
    521            p_evt_params_timing->conn_rf_timeout       |= *(buffer_in + OFFSET_ACI_EVT_T_TIMING + OFFSET_ACI_EVT_PARAMS_TIMING_T_CONN_RF_TIMEOUT_LSB);
   \   000075 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   000077 72                    MOV       C, A               ;; 1 cycle
   \   000078 F3                    CLRB      B                  ;; 1 cycle
   \   000079 8C04                  MOV       A, [HL+0x04]       ;; 1 cycle
   \   00007B 74                    MOV       E, A               ;; 1 cycle
   \   00007C 5500                  MOV       D, #0x0            ;; 1 cycle
   \   00007E 8C05                  MOV       A, [HL+0x05]       ;; 1 cycle
   \   000080 70                    MOV       X, A               ;; 1 cycle
   \   000081 318D                  SHLW      AX, 0x8            ;; 1 cycle
   \   000083 616D                  OR        A, D               ;; 1 cycle
   \   000085 08                    XCH       A, X               ;; 1 cycle
   \   000086 616C                  OR        A, E               ;; 1 cycle
   \   000088 08                    XCH       A, X               ;; 1 cycle
   \   000089 616B                  OR        A, B               ;; 1 cycle
   \   00008B 08                    XCH       A, X               ;; 1 cycle
   \   00008C 616A                  OR        A, C               ;; 1 cycle
   \   00008E 08                    XCH       A, X               ;; 1 cycle
   \   00008F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000090 64                    MOV       A, E               ;; 1 cycle
   \   000091 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
   \   000093 15                    MOVW      AX, DE             ;; 1 cycle
   \   000094 F0                    CLRB      X                  ;; 1 cycle
   \   000095 70                    MOV       X, A               ;; 1 cycle
   \   000096 60                    MOV       A, X               ;; 1 cycle
   \   000097 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
    522          }
   \   000099 C4                    POP       DE                 ;; 1 cycle
   \   00009A D7                    RET                          ;; 6 cycles
   \   00009B                       ; ------------------------------------- Block: 120 cycles
   \   00009B                       ; ------------------------------------- Total: 120 cycles
   \   00009B                       REQUIRE ?CLRL78_V1_0_L00
    523          

   \                                 In  segment CODE, align 1, keep-with-next
    524          void acil_decode_evt_pipe_error(uint8_t *buffer_in, aci_evt_params_pipe_error_t *p_evt_params_pipe_error)
   \                     acil_decode_evt_pipe_error:
    525          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    526            //volatile uint8_t size = *(buffer_in + OFFSET_ACI_EVT_T_LEN) - (OFFSET_ACI_EVT_T_PIPE_ERROR + OFFSET_ACI_EVT_PARAMS_PIPE_ERROR_T_ERROR_DATA) + 1;
    527            p_evt_params_pipe_error->pipe_number = *(buffer_in + OFFSET_ACI_EVT_T_PIPE_ERROR + OFFSET_ACI_EVT_PARAMS_PIPE_ERROR_T_PIPE_NUMBER);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    528            p_evt_params_pipe_error->error_code = *(buffer_in + OFFSET_ACI_EVT_T_PIPE_ERROR + OFFSET_ACI_EVT_PARAMS_PIPE_ERROR_T_ERROR_CODE);
   \   000007 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    529            p_evt_params_pipe_error->params.error_data.content[0] = *(buffer_in + OFFSET_ACI_EVT_T_PIPE_ERROR + OFFSET_ACI_EVT_PARAMS_PIPE_ERROR_T_ERROR_DATA + OFFSET_ERROR_DATA_T_CONTENT);
   \   00000B 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00000D 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    530          }
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010 D7                    RET                          ;; 6 cycles
   \   000011                       ; ------------------------------------- Block: 17 cycles
   \   000011                       ; ------------------------------------- Total: 17 cycles
   \   000011                       REQUIRE ?CLRL78_V1_0_L00
    531          

   \                                 In  segment CODE, align 1, keep-with-next
    532          void acil_decode_evt_key_request(uint8_t *buffer_in, aci_evt_params_key_request_t *p_evt_params_key_request)
   \                     acil_decode_evt_key_request:
    533          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    534            p_evt_params_key_request->key_type = (aci_key_type_t)*(buffer_in + OFFSET_ACI_EVT_T_KEY_REQUEST + OFFSET_ACI_EVT_PARAMS_KEY_REQUEST_T_KEY_TYPE);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    535          }
   \   000007 C4                    POP       DE                 ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 13 cycles
   \   000009                       ; ------------------------------------- Total: 13 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    536          

   \                                 In  segment CODE, align 1, keep-with-next
    537          uint8_t acil_decode_evt_echo(uint8_t *buffer_in, aci_evt_params_echo_t *aci_evt_params_echo)
   \                     acil_decode_evt_echo:
    538          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 6
   \   000003 C1                    PUSH      AX                 ;; 1 cycle
    539            uint8_t size = *(buffer_in + OFFSET_ACI_EVT_T_LEN) - 1;
   \   000004 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000006 16                    MOVW      HL, AX             ;; 1 cycle
   \   000007 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000008 91                    DEC       A                  ;; 1 cycle
   \   000009 9800                  MOV       [SP], A            ;; 1 cycle
    540            memcpy(&aci_evt_params_echo->echo_data[0], (buffer_in + OFFSET_ACI_EVT_T_EVT_OPCODE + 1), size);
   \   00000B 8800                  MOV       A, [SP]            ;; 1 cycle
   \   00000D 72                    MOV       C, A               ;; 1 cycle
   \   00000E F3                    CLRB      B                  ;; 1 cycle
   \   00000F A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000011 040200                ADDW      AX, #0x2           ;; 1 cycle
   \   000014 14                    MOVW      DE, AX             ;; 1 cycle
   \   000015 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 13                    MOVW      AX, BC             ;; 1 cycle
   \   000019 FD....                CALL      N:?MEMCPY_NEAR     ;; 3 cycles
    541            return size;
   \   00001C 8800                  MOV       A, [SP]            ;; 1 cycle
   \   00001E 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   000020 C4                    POP       DE                 ;; 1 cycle
   \   000021 D7                    RET                          ;; 6 cycles
   \   000022                       ; ------------------------------------- Block: 30 cycles
   \   000022                       ; ------------------------------------- Total: 30 cycles
   \   000022                       REQUIRE ?CLRL78_V1_0_L00
    542          }
    543          

   \                                 In  segment CODE, align 1, keep-with-next
    544          void acil_decode_evt_display_passkey(uint8_t *buffer_in, aci_evt_params_display_passkey_t *p_aci_evt_params_display_passkey)
   \                     acil_decode_evt_display_passkey:
    545          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001                       ; Auto size: 0
   \   000001 14                    MOVW      DE, AX             ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C6                    POP       HL                 ;; 1 cycle
    546            p_aci_evt_params_display_passkey->passkey[0] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 0);
   \   000004 8A02                  MOV       A, [DE+0x02]       ;; 1 cycle
   \   000006 9B                    MOV       [HL], A            ;; 1 cycle
    547            p_aci_evt_params_display_passkey->passkey[1] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 1);
   \   000007 8A03                  MOV       A, [DE+0x03]       ;; 1 cycle
   \   000009 9C01                  MOV       [HL+0x01], A       ;; 1 cycle
    548            p_aci_evt_params_display_passkey->passkey[2] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 2);
   \   00000B 8A04                  MOV       A, [DE+0x04]       ;; 1 cycle
   \   00000D 9C02                  MOV       [HL+0x02], A       ;; 1 cycle
    549            p_aci_evt_params_display_passkey->passkey[3] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 3);
   \   00000F 8A05                  MOV       A, [DE+0x05]       ;; 1 cycle
   \   000011 9C03                  MOV       [HL+0x03], A       ;; 1 cycle
    550            p_aci_evt_params_display_passkey->passkey[4] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 4);
   \   000013 8A06                  MOV       A, [DE+0x06]       ;; 1 cycle
   \   000015 9C04                  MOV       [HL+0x04], A       ;; 1 cycle
    551            p_aci_evt_params_display_passkey->passkey[5] = *(buffer_in + OFFSET_ACI_EVT_T_DISPLAY_PASSKEY +  OFFSET_ACI_EVT_PARAMS_DISPLAY_PASSKEY_T_PASSKEY + 5);
   \   000017 8A07                  MOV       A, [DE+0x07]       ;; 1 cycle
   \   000019 9C05                  MOV       [HL+0x05], A       ;; 1 cycle
    552          }
   \   00001B C4                    POP       DE                 ;; 1 cycle
   \   00001C D7                    RET                          ;; 6 cycles
   \   00001D                       ; ------------------------------------- Block: 23 cycles
   \   00001D                       ; ------------------------------------- Total: 23 cycles
   \   00001D                       REQUIRE ?CLRL78_V1_0_L00
    553          

   \                                 In  segment CODE, align 1, keep-with-next
    554          bool acil_decode_evt(uint8_t *buffer_in, aci_evt_t *p_aci_evt)
   \                     acil_decode_evt:
    555          {
   \   000000                       ; * Stack frame (at entry) *
   \   000000                       ; Param size: 0
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003                       ; Auto size: 4
    556            bool ret_val = true;
   \   000003 5501                  MOV       D, #0x1            ;; 1 cycle
    557          
    558            p_aci_evt->len = ACIL_DECODE_EVT_GET_LENGTH(buffer_in);
   \   000005 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000007 16                    MOVW      HL, AX             ;; 1 cycle
   \   000008 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000009 73                    MOV       B, A               ;; 1 cycle
   \   00000A A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000D 63                    MOV       A, B               ;; 1 cycle
   \   00000E 9B                    MOV       [HL], A            ;; 1 cycle
    559            p_aci_evt->evt_opcode = (aci_evt_opcode_t)ACIL_DECODE_EVT_GET_OPCODE(buffer_in);
   \   00000F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000011 16                    MOVW      HL, AX             ;; 1 cycle
   \   000012 A7                    INCW      HL                 ;; 1 cycle
   \   000013 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000014 73                    MOV       B, A               ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 A7                    INCW      HL                 ;; 1 cycle
   \   000019 63                    MOV       A, B               ;; 1 cycle
   \   00001A 9B                    MOV       [HL], A            ;; 1 cycle
    560          
    561            switch(p_aci_evt->evt_opcode)
   \   00001B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001E A7                    INCW      HL                 ;; 1 cycle
   \   00001F 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000020 2C81                  SUB       A, #0x81           ;; 1 cycle
   \   000022 DD40                  BZ        ??acil_decode_evt_12  ;; 4 cycles
   \   000024                       ; ------------------------------------- Block: 31 cycles
   \   000024 2C02                  SUB       A, #0x2            ;; 1 cycle
   \   000026 DD49                  BZ        ??acil_decode_evt_13  ;; 4 cycles
   \   000028                       ; ------------------------------------- Block: 5 cycles
   \   000028 91                    DEC       A                  ;; 1 cycle
   \   000029 DD53                  BZ        ??acil_decode_evt_14  ;; 4 cycles
   \   00002B                       ; ------------------------------------- Block: 5 cycles
   \   00002B 91                    DEC       A                  ;; 1 cycle
   \   00002C DD69                  BZ        ??acil_decode_evt_15  ;; 4 cycles
   \   00002E                       ; ------------------------------------- Block: 5 cycles
   \   00002E 91                    DEC       A                  ;; 1 cycle
   \   00002F DD7E                  BZ        ??acil_decode_evt_16  ;; 4 cycles
   \   000031                       ; ------------------------------------- Block: 5 cycles
   \   000031 91                    DEC       A                  ;; 1 cycle
   \   000032 61F8                  SKNZ                         ;; 4 cycles
   \   000034 ED....                BR        N:??acil_decode_evt_17  ;; 4 cycles
   \   000037                       ; ------------------------------------- Block: 5 cycles
   \   000037 91                    DEC       A                  ;; 1 cycle
   \   000038 DD69                  BZ        ??acil_decode_evt_18  ;; 4 cycles
   \   00003A                       ; ------------------------------------- Block: 5 cycles
   \   00003A 91                    DEC       A                  ;; 1 cycle
   \   00003B 61F8                  SKNZ                         ;; 4 cycles
   \   00003D ED....                BR        N:??acil_decode_evt_19  ;; 4 cycles
   \   000040                       ; ------------------------------------- Block: 5 cycles
   \   000040 91                    DEC       A                  ;; 1 cycle
   \   000041 DD48                  BZ        ??acil_decode_evt_20  ;; 4 cycles
   \   000043                       ; ------------------------------------- Block: 5 cycles
   \   000043 91                    DEC       A                  ;; 1 cycle
   \   000044 61F8                  SKNZ                         ;; 4 cycles
   \   000046 ED....                BR        N:??acil_decode_evt_21  ;; 4 cycles
   \   000049                       ; ------------------------------------- Block: 5 cycles
   \   000049 91                    DEC       A                  ;; 1 cycle
   \   00004A 61F8                  SKNZ                         ;; 4 cycles
   \   00004C ED....                BR        N:??acil_decode_evt_22  ;; 4 cycles
   \   00004F                       ; ------------------------------------- Block: 5 cycles
   \   00004F 91                    DEC       A                  ;; 1 cycle
   \   000050 61F8                  SKNZ                         ;; 4 cycles
   \   000052 ED....                BR        N:??acil_decode_evt_23  ;; 4 cycles
   \   000055                       ; ------------------------------------- Block: 5 cycles
   \   000055 91                    DEC       A                  ;; 1 cycle
   \   000056 61F8                  SKNZ                         ;; 4 cycles
   \   000058 ED....                BR        N:??acil_decode_evt_24  ;; 4 cycles
   \   00005B                       ; ------------------------------------- Block: 5 cycles
   \   00005B 91                    DEC       A                  ;; 1 cycle
   \   00005C 61F8                  SKNZ                         ;; 4 cycles
   \   00005E ED....                BR        N:??acil_decode_evt_25  ;; 4 cycles
   \   000061                       ; ------------------------------------- Block: 5 cycles
   \   000061 ED....                BR        N:??acil_decode_evt_26  ;; 3 cycles
   \   000064                       ; ------------------------------------- Block: 3 cycles
    562            {
    563              case ACI_EVT_DEVICE_STARTED:
    564                acil_decode_evt_device_started(buffer_in, &(p_aci_evt->params.device_started));
   \                     ??acil_decode_evt_12:
   \   000064 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000066 12                    MOVW      BC, AX             ;; 1 cycle
   \   000067 A3                    INCW      BC                 ;; 1 cycle
   \   000068 A3                    INCW      BC                 ;; 1 cycle
   \   000069 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006B FD....                CALL      acil_decode_evt_device_started  ;; 3 cycles
    565                break;
   \   00006E ED....                BR        N:??acil_decode_evt_27  ;; 3 cycles
   \   000071                       ; ------------------------------------- Block: 11 cycles
    566              case ACI_EVT_HW_ERROR:
    567                acil_decode_evt_hw_error(buffer_in, &(p_aci_evt->params.hw_error));
   \                     ??acil_decode_evt_13:
   \   000071 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000073 12                    MOVW      BC, AX             ;; 1 cycle
   \   000074 A3                    INCW      BC                 ;; 1 cycle
   \   000075 A3                    INCW      BC                 ;; 1 cycle
   \   000076 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000078 FD....                CALL      acil_decode_evt_hw_error  ;; 3 cycles
    568                break;
   \   00007B ED....                BR        N:??acil_decode_evt_27  ;; 3 cycles
   \   00007E                       ; ------------------------------------- Block: 11 cycles
    569              case ACI_EVT_CMD_RSP:
    570                acil_decode_evt_command_response(buffer_in, &(p_aci_evt->params.cmd_rsp));
   \                     ??acil_decode_evt_14:
   \   00007E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000080 12                    MOVW      BC, AX             ;; 1 cycle
   \   000081 A3                    INCW      BC                 ;; 1 cycle
   \   000082 A3                    INCW      BC                 ;; 1 cycle
   \   000083 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000085 FD....                CALL      acil_decode_evt_command_response  ;; 3 cycles
    571                break;
   \   000088 ED....                BR        N:??acil_decode_evt_27  ;; 3 cycles
   \   00008B                       ; ------------------------------------- Block: 11 cycles
    572              case ACI_EVT_DATA_CREDIT:
    573                acil_decode_evt_credit(buffer_in, &(p_aci_evt->params.data_credit));
   \                     ??acil_decode_evt_20:
   \   00008B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00008D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00008E A3                    INCW      BC                 ;; 1 cycle
   \   00008F A3                    INCW      BC                 ;; 1 cycle
   \   000090 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000092 FD....                CALL      acil_decode_evt_credit  ;; 3 cycles
    574                break;
   \   000095 EF7A                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   000097                       ; ------------------------------------- Block: 11 cycles
    575              case ACI_EVT_CONNECTED:
    576                acil_decode_evt_connected(buffer_in, &(p_aci_evt->params.connected));
   \                     ??acil_decode_evt_15:
   \   000097 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000099 12                    MOVW      BC, AX             ;; 1 cycle
   \   00009A A3                    INCW      BC                 ;; 1 cycle
   \   00009B A3                    INCW      BC                 ;; 1 cycle
   \   00009C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00009E FD....                CALL      acil_decode_evt_connected  ;; 3 cycles
    577                break;
   \   0000A1 EF6E                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000A3                       ; ------------------------------------- Block: 11 cycles
    578              case ACI_EVT_PIPE_STATUS:
    579                acil_decode_evt_pipe_status(buffer_in, &(p_aci_evt->params.pipe_status));
   \                     ??acil_decode_evt_18:
   \   0000A3 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000A5 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000A6 A3                    INCW      BC                 ;; 1 cycle
   \   0000A7 A3                    INCW      BC                 ;; 1 cycle
   \   0000A8 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000AA FD....                CALL      acil_decode_evt_pipe_status  ;; 3 cycles
    580                break;
   \   0000AD EF62                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000AF                       ; ------------------------------------- Block: 11 cycles
    581              case ACI_EVT_DISCONNECTED:
    582                acil_decode_evt_disconnected(buffer_in, &(p_aci_evt->params.disconnected));
   \                     ??acil_decode_evt_16:
   \   0000AF A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000B1 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000B2 A3                    INCW      BC                 ;; 1 cycle
   \   0000B3 A3                    INCW      BC                 ;; 1 cycle
   \   0000B4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000B6 FD....                CALL      acil_decode_evt_disconnected  ;; 3 cycles
    583                break;
   \   0000B9 EF56                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000BB                       ; ------------------------------------- Block: 11 cycles
    584              case ACI_EVT_BOND_STATUS:
    585                acil_decode_evt_bond_status(buffer_in, &(p_aci_evt->params.bond_status));
   \                     ??acil_decode_evt_17:
   \   0000BB A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000BD 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000BE A3                    INCW      BC                 ;; 1 cycle
   \   0000BF A3                    INCW      BC                 ;; 1 cycle
   \   0000C0 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000C2 FD....                CALL      acil_decode_evt_bond_status  ;; 3 cycles
    586                break;
   \   0000C5 EF4A                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000C7                       ; ------------------------------------- Block: 11 cycles
    587              case ACI_EVT_TIMING:
    588                acil_decode_evt_timing(buffer_in, &(p_aci_evt->params.timing));
   \                     ??acil_decode_evt_19:
   \   0000C7 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000C9 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000CA A3                    INCW      BC                 ;; 1 cycle
   \   0000CB A3                    INCW      BC                 ;; 1 cycle
   \   0000CC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000CE FD....                CALL      acil_decode_evt_timing  ;; 3 cycles
    589                break;
   \   0000D1 EF3E                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000D3                       ; ------------------------------------- Block: 11 cycles
    590              case ACI_EVT_DATA_ACK:
    591                acil_decode_evt_data_ack(buffer_in, &(p_aci_evt->params.data_ack));
   \                     ??acil_decode_evt_21:
   \   0000D3 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000D5 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000D6 A3                    INCW      BC                 ;; 1 cycle
   \   0000D7 A3                    INCW      BC                 ;; 1 cycle
   \   0000D8 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000DA FD....                CALL      acil_decode_evt_data_ack  ;; 3 cycles
    592                break;
   \   0000DD EF32                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000DF                       ; ------------------------------------- Block: 11 cycles
    593              case ACI_EVT_DATA_RECEIVED:
    594                acil_decode_evt_data_received(buffer_in, &(p_aci_evt->params.data_received));
   \                     ??acil_decode_evt_22:
   \   0000DF A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000E1 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000E2 A3                    INCW      BC                 ;; 1 cycle
   \   0000E3 A3                    INCW      BC                 ;; 1 cycle
   \   0000E4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000E6 FD....                CALL      acil_decode_evt_data_received  ;; 3 cycles
    595                break;
   \   0000E9 EF26                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000EB                       ; ------------------------------------- Block: 11 cycles
    596              case ACI_EVT_PIPE_ERROR:
    597                acil_decode_evt_pipe_error(buffer_in, &(p_aci_evt->params.pipe_error));
   \                     ??acil_decode_evt_23:
   \   0000EB A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000ED 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000EE A3                    INCW      BC                 ;; 1 cycle
   \   0000EF A3                    INCW      BC                 ;; 1 cycle
   \   0000F0 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000F2 FD....                CALL      acil_decode_evt_pipe_error  ;; 3 cycles
    598                break;
   \   0000F5 EF1A                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   0000F7                       ; ------------------------------------- Block: 11 cycles
    599              case ACI_EVT_KEY_REQUEST:
    600                acil_decode_evt_key_request(buffer_in, &(p_aci_evt->params.key_request));
   \                     ??acil_decode_evt_25:
   \   0000F7 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000F9 12                    MOVW      BC, AX             ;; 1 cycle
   \   0000FA A3                    INCW      BC                 ;; 1 cycle
   \   0000FB A3                    INCW      BC                 ;; 1 cycle
   \   0000FC A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000FE FD....                CALL      acil_decode_evt_key_request  ;; 3 cycles
    601                break;
   \   000101 EF0E                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   000103                       ; ------------------------------------- Block: 11 cycles
    602              case ACI_EVT_DISPLAY_PASSKEY:
    603                acil_decode_evt_display_passkey(buffer_in, &(p_aci_evt->params.display_passkey));     
   \                     ??acil_decode_evt_24:
   \   000103 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000105 12                    MOVW      BC, AX             ;; 1 cycle
   \   000106 A3                    INCW      BC                 ;; 1 cycle
   \   000107 A3                    INCW      BC                 ;; 1 cycle
   \   000108 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00010A FD....                CALL      acil_decode_evt_display_passkey  ;; 3 cycles
    604                break;
   \   00010D EF02                  BR        S:??acil_decode_evt_27  ;; 3 cycles
   \   00010F                       ; ------------------------------------- Block: 11 cycles
    605              default:
    606                ret_val = false;
   \                     ??acil_decode_evt_26:
   \   00010F 5500                  MOV       D, #0x0            ;; 1 cycle
    607                break;
   \   000111                       ; ------------------------------------- Block: 1 cycles
    608            }
    609            return ret_val;
   \                     ??acil_decode_evt_27:
   \   000111 65                    MOV       A, D               ;; 1 cycle
   \   000112 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000114 C4                    POP       DE                 ;; 1 cycle
   \   000115 D7                    RET                          ;; 6 cycles
   \   000116                       ; ------------------------------------- Block: 9 cycles
   \   000116                       ; ------------------------------------- Total: 263 cycles
   \   000116                       REQUIRE ?CLRL78_V1_0_L00
    610          }

   \                                 In  segment SWITCH, align 2
   \                     ??acil_encode_cmd_0:
   \   000000 0100                  DW        1
   \   000002 1D00                  DW        29
   \   000004 ....                  DW        ??acil_decode_evt_4
   \   000006 ....                  DW        ??acil_encode_cmd_1
   \   000008 ....                  DW        ??acil_encode_cmd_5
   \   00000A ....                  DW        ??acil_encode_cmd_16
   \   00000C ....                  DW        ??acil_encode_cmd_2
   \   00000E ....                  DW        ??acil_encode_cmd_4
   \   000010 ....                  DW        ??acil_encode_cmd_15
   \   000012 ....                  DW        ??acil_encode_cmd_17
   \   000014 ....                  DW        ??acil_encode_cmd_18
   \   000016 ....                  DW        ??acil_encode_cmd_3
   \   000018 ....                  DW        ??acil_encode_cmd_8
   \   00001A ....                  DW        ??acil_encode_cmd_6
   \   00001C ....                  DW        ??acil_encode_cmd_7
   \   00001E ....                  DW        ??acil_encode_cmd_23
   \   000020 ....                  DW        ??acil_encode_cmd_13
   \   000022 ....                  DW        ??acil_encode_cmd_10
   \   000024 ....                  DW        ??acil_encode_cmd_11
   \   000026 ....                  DW        ??acil_encode_cmd_12
   \   000028 ....                  DW        ??acil_encode_cmd_9
   \   00002A ....                  DW        ??acil_encode_cmd_14
   \   00002C ....                  DW        ??acil_encode_cmd_19
   \   00002E ....                  DW        ??acil_encode_cmd_20
   \   000030 ....                  DW        ??acil_encode_cmd_21
   \   000032 ....                  DW        ??acil_encode_cmd_22
   \   000034 ....                  DW        ??acil_decode_evt_4
   \   000036 ....                  DW        ??acil_decode_evt_4
   \   000038 ....                  DW        ??acil_decode_evt_4
   \   00003A ....                  DW        ??acil_decode_evt_4
   \   00003C ....                  DW        ??acil_decode_evt_4
   \   00003E ....                  DW        ??acil_encode_cmd_24

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   acil_decode_evt
        6   -> acil_decode_evt_bond_status
        6   -> acil_decode_evt_command_response
        6   -> acil_decode_evt_connected
        6   -> acil_decode_evt_credit
        6   -> acil_decode_evt_data_ack
        6   -> acil_decode_evt_data_received
        6   -> acil_decode_evt_device_started
        6   -> acil_decode_evt_disconnected
        6   -> acil_decode_evt_display_passkey
        6   -> acil_decode_evt_hw_error
        6   -> acil_decode_evt_key_request
        6   -> acil_decode_evt_pipe_error
        6   -> acil_decode_evt_pipe_status
        6   -> acil_decode_evt_timing
      2   acil_decode_evt_bond_status
     24   acil_decode_evt_command_response
      6   acil_decode_evt_connected
      2   acil_decode_evt_credit
      2   acil_decode_evt_data_ack
      6   acil_decode_evt_data_received
      2   acil_decode_evt_device_started
      2   acil_decode_evt_disconnected
      2   acil_decode_evt_display_passkey
      8   acil_decode_evt_echo
      6   acil_decode_evt_hw_error
      2   acil_decode_evt_key_request
      2   acil_decode_evt_pipe_error
      6   acil_decode_evt_pipe_status
      4   acil_decode_evt_timing
      0   acil_encode_baseband_reset
      8   acil_encode_cmd
        8   -> acil_encode_baseband_reset
        8   -> acil_encode_cmd_battery_level
        8   -> acil_encode_cmd_bond
        8   -> acil_encode_cmd_bond_security_request
        8   -> acil_encode_cmd_change_timing_req
        8   -> acil_encode_cmd_connect
        8   -> acil_encode_cmd_disconnect
        8   -> acil_encode_cmd_dtm_cmd
        8   -> acil_encode_cmd_echo_msg
        8   -> acil_encode_cmd_get_address
        8   -> acil_encode_cmd_get_device_version
        8   -> acil_encode_cmd_open_remote_pipe
        8   -> acil_encode_cmd_read_dynamic_data
        8   -> acil_encode_cmd_request_data
        8   -> acil_encode_cmd_send_data
        8   -> acil_encode_cmd_send_data_ack
        8   -> acil_encode_cmd_set_local_data
        8   -> acil_encode_cmd_set_radio_tx_power
        8   -> acil_encode_cmd_set_test_mode
        8   -> acil_encode_cmd_setup
        8   -> acil_encode_cmd_sleep
        8   -> acil_encode_cmd_temparature
        8   -> acil_encode_cmd_wakeup
        8   -> acil_encode_cmd_write_dynamic_data
      0   acil_encode_cmd_battery_level
      6   acil_encode_cmd_bond
      0   acil_encode_cmd_bond_security_request
      6   acil_encode_cmd_broadcast
      6   acil_encode_cmd_change_timing_req
      0   acil_encode_cmd_change_timing_req_GAP_PPCP
      2   acil_encode_cmd_close_remote_pipe
      6   acil_encode_cmd_connect
      2   acil_encode_cmd_disconnect
      2   acil_encode_cmd_dtm_cmd
      4   acil_encode_cmd_echo_msg
      0   acil_encode_cmd_get_address
      0   acil_encode_cmd_get_device_version
      2   acil_encode_cmd_open_adv_pipes
      2   acil_encode_cmd_open_remote_pipe
      0   acil_encode_cmd_read_dynamic_data
      2   acil_encode_cmd_request_data
      4   acil_encode_cmd_send_data
      0   acil_encode_cmd_send_data_ack
      0   acil_encode_cmd_send_data_nack
      2   acil_encode_cmd_set_app_latency
      2   acil_encode_cmd_set_key
      4   acil_encode_cmd_set_local_data
      2   acil_encode_cmd_set_radio_tx_power
      2   acil_encode_cmd_set_test_mode
      4   acil_encode_cmd_setup
      0   acil_encode_cmd_sleep
      0   acil_encode_cmd_temparature
      0   acil_encode_cmd_wakeup
      0   acil_encode_cmd_write_dynamic_data
      0   acil_encode_direct_connect


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      64  ??acil_encode_cmd_0
     278  acil_decode_evt
      29  acil_decode_evt_bond_status
     917  acil_decode_evt_command_response
     294  acil_decode_evt_connected
       9  acil_decode_evt_credit
       9  acil_decode_evt_data_ack
      38  acil_decode_evt_data_received
      17  acil_decode_evt_device_started
      13  acil_decode_evt_disconnected
      29  acil_decode_evt_display_passkey
      34  acil_decode_evt_echo
      89  acil_decode_evt_hw_error
       9  acil_decode_evt_key_request
      17  acil_decode_evt_pipe_error
      42  acil_decode_evt_pipe_status
     155  acil_decode_evt_timing
       8  acil_encode_baseband_reset
     325  acil_encode_cmd
       8  acil_encode_cmd_battery_level
     102  acil_encode_cmd_bond
       8  acil_encode_cmd_bond_security_request
     104  acil_encode_cmd_broadcast
     141  acil_encode_cmd_change_timing_req
       8  acil_encode_cmd_change_timing_req_GAP_PPCP
      16  acil_encode_cmd_close_remote_pipe
     102  acil_encode_cmd_connect
      16  acil_encode_cmd_disconnect
      20  acil_encode_cmd_dtm_cmd
      27  acil_encode_cmd_echo_msg
       8  acil_encode_cmd_get_address
       8  acil_encode_cmd_get_device_version
      20  acil_encode_cmd_open_adv_pipes
      16  acil_encode_cmd_open_remote_pipe
       8  acil_encode_cmd_read_dynamic_data
      16  acil_encode_cmd_request_data
      36  acil_encode_cmd_send_data
      12  acil_encode_cmd_send_data_ack
      15  acil_encode_cmd_send_data_nack
      38  acil_encode_cmd_set_app_latency
      46  acil_encode_cmd_set_key
      36  acil_encode_cmd_set_local_data
      16  acil_encode_cmd_set_radio_tx_power
      15  acil_encode_cmd_set_test_mode
      27  acil_encode_cmd_setup
       8  acil_encode_cmd_sleep
       8  acil_encode_cmd_temparature
       8  acil_encode_cmd_wakeup
      21  acil_encode_cmd_write_dynamic_data
       8  acil_encode_direct_connect

 
 3 234 bytes in segment CODE
    64 bytes in segment SWITCH
 
 3 234 bytes of CODE  memory
    64 bytes of CONST memory

Errors: none
Warnings: none
